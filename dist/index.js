module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=20)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={};this.getAttemptToRemove=function(){return t.attemptToRemove},this.setAttemptToRemove=function(e){t.attemptToRemove=e},this.setDraggedElement=function(e){t.draggedElement=e},this.getDraggedElement=function(){return t.draggedElement},this.registerPaletteElements=function(e){t.registeredPaletteElements=e},this.getRegisteredPaletteElements=function(){return t.registeredPaletteElements||[]},this.setDropPostion=function(e){t.dropPosition=e},this.getDropPostion=function(){return t.dropPosition},this.error=console.error,this.log=console.log};t.default=r},function(e,t){e.exports=require("react")},function(e,t,n){e.exports=n(18)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(14),i=(r=a)&&r.__esModule?r:{default:r};var l=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={},n=["id","type","name","payload","dropzoneID","parentID"];t.tree=[{id:"root",fields:[]}];var r=function e(n,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.tree,a=o.find(function(e){return e.id===r});if(!a)for(var i=0;i<o.length;i++){var l=o[i];if(l.fields){var s=e(n,r,l.fields);if(s)return s}}return a},a=function(e,t,n){var o=r(t,n);return o?o.fields.find(function(t){return t.id===e}):null},l=function(e,t){var r={};return e?(Object.keys(e).forEach(function(o){"function"!=typeof e[o]&&(t||!t&&-1!==n.indexOf(o))&&(r[o]=e[o])}),r):null},s=function(){return l(a.apply(void 0,arguments))};this.updateState=function(e,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},a=arguments[4];!function e(n,r,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.tree,i=a.find(function(e){return e.id===r}),l=!1;if(i){if(n===r)i.fields=o;else if(i.fields&&o.length){var s=[];i.fields.filter(function(e){return e.dropzoneID===n}).length!==o.length?i.fields=o.concat(i.fields.filter(function(e){return e.dropzoneID!==n})):(o.forEach(function(e){-1===i.fields.findIndex(function(t){return t.id===e.id})&&s.push(e)}),s.length||(i.fields=i.fields.map(function(e){return o.find(function(t){return t.id===e.id})||e}))),s.length&&(i.fields=i.fields.concat(s))}else n&&i.fields?i.fields=i.fields.filter(function(e){return e.dropzoneID!==n}):i.fields=o;l=!0}else for(var u=0;u<a.length;u++){var f=a[u].fields,c=!1;if(f&&(c=e(n,r,o,f)),c)break}return l}(e,n,r),o(t.tree),i.default.notifyStateChange(),a&&i.default.notifyElementRemove({dropzoneID:e,parentID:n,dispatchElementRemove:a,trashed:!0})},this.getElementParent=r,this.getElement=s,this.removeElement=function(e,t,n,r){var o=a(e,t,n);return!!o&&(o.removeElement(e,r),i.default.notifyElementRemove({elementID:e,dropzoneID:t,parentID:n,trashed:!1}),!0)},this.updateElement=function(e,t,n,r,l){var u=a(e,t,n);return!!u&&(u.updateElement(o({},r,{id:e}),l),i.default.notifyElementUpdate(s(e,t,n)),!0)},this.getState=function(){return t.tree},this.getStorableState=function(){return t.tree[0].fields.map(function(e){return function e(t){var n=[],r=l(t,!0);return t.fields&&t.fields.length&&t.fields.forEach(function(t){n.push(e(t))}),n.length&&(r.initialElements=[],r.fields=[],n.forEach(function(e){r.initialElements.push(e),r.fields.push(e)})),r}(e)})},this.clearState=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=t.tree[0],r=n.fields.length;return n.fields.length||(i.default.notifyStateFlush(),e()),n.fields.forEach(function(t,n){t.flushDroppedElements(function(){n===r-1&&(i.default.notifyStateFlush(!0),e())})}),!0},this.addEventListener=i.default.addEventListener,this.removeEventListener=i.default.removeEventListener};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=f(a),l=f(n(2)),s=f(n(3)),u=f(n(0));function f(e){return e&&e.__esModule?e:{default:e}}function c(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return p.call(n),n.canvasRef=i.default.createRef(),n.state={initialElements:[],droppedElements:[],initDone:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillMount",value:function(){this._setInitialElements(this.props.initialElements)}},{key:"componentWillReceiveProps",value:function(e){var t=e.initialElements;this._setInitialElements(t)}},{key:"render",value:function(){var e=this,t=this.state.droppedElements,n=this.props,o=n.capacity,a=n.id,l=n.placeholder,s=!o||o>t.length;return i.default.createElement("div",{ref:this.canvasRef,className:(s?"":"no-space")+" "+("root"===a?"canvas":"")+" "+(t.length?"":"empty")+" dropzone",onDragOver:this._onDragOver,onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDrop:this._onDrop,onDragEnd:this._onDragEnd},t.map(function(t,n){return e._renderDragItem(r({},t,{index:n,spaceAvailable:s,initDone:e.state.initDone,dropzoneProps:{initDone:e.state.initDone,parentID:t.id}}))}),t.length?null:i.default.createElement("p",{className:"dropzone-placeholder"},l))}}]),t}(),p=function(){var e=this;this.dangerouslySetElements=function(t,n){var o=[];o="function"==typeof t?t(e.state.droppedElements)||[]:t;var a=e.props,i=a.id,l=a.parentID;o=o.map(function(t){return r({},t,{dropzoneID:i,parentID:l,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,updateElement:e._updateElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement})}),e.setState({initialElements:o,droppedElements:o},function(){return e._updateState(n)})},this._unmarkDragElements=function(){[].forEach.call(e.canvasRef.current.querySelectorAll(".drag-item"),function(e){return e.classList.remove("before","after")})},this._setInitialElements=function(t){if(Array.isArray(t)&&t.length&&!e.state.initDone&&!e.state.initialElements.length){var n=e.props,o=n.id,a=n.parentID,i=t.map(function(t){return r({},t,{key:t.id,dropzoneID:o,parentID:a,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,updateElement:e._updateElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement})});e.setState({initialElements:i,droppedElements:i},function(){return e._updateState(function(){e.setState({initDone:!0})})})}},this._manageInsideClass=function(t,n){var r=t.target;e.canvasRef.current===r&&r.classList[n]("inside")},this._removeElement=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r=arguments[2],o=e.state.droppedElements.findIndex(function(e){return e.id===t});e.setState({droppedElements:e.state.droppedElements.filter(function(e,t){return t!==o})},function(){return e._updateState(n,r?t:null)})},this._updateElement=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};if(-1===e.state.droppedElements.findIndex(function(e){return e.id===t.id}))return n(null);var o=["name","type","payload"],a={};return Object.keys(t).forEach(function(e){-1!==o.indexOf(e)&&(a[e]=t[e])}),e.setState({droppedElements:e.state.droppedElements.map(function(e){return e.id===t.id?r({},e,a):e})},function(){return e._updateState(n)}),!0},this._updateState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=arguments[1],r=e.props,o=r.id,a=r.parentID;s.default.updateState(o,a,e.state.droppedElements,t,n)},this._flushDroppedElements=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};e.setState({initialElements:[],droppedElements:[]},function(){return e._updateState(t)})},this._checkAndRemoveElement=function(){var t=u.default.getDraggedElement(),n=t.removeElement,r=t.elementID,o=e.props.onElementMove(t),a=!u.default.getAttemptToRemove();o&&a&&n(r)},this._onDragOver=function(e){e.preventDefault(),e.stopPropagation()},this._onDragLeave=function(t){e._manageInsideClass(t,"remove"),u.default.setAttemptToRemove(!0)},this._onDragEnter=function(t){e._manageInsideClass(t,"add"),u.default.setAttemptToRemove(!1)},this._onDrop=function(t){t.preventDefault(),t.stopPropagation();var n=e.state.droppedElements;u.default.setAttemptToRemove(!1),e._manageInsideClass(t,"remove");var o=e.props.onDrop,a=JSON.parse(t.dataTransfer.getData("data"));return a=r({},a),e._unmarkDragElements(),o?o(a,e._addElement,{dropIndex:n.length?0:u.default.getDropPostion()+1,currentElements:n}):e._addElement(a)},this._addElement=function(t){var n=e.props,o=n.id,a=n.capacity,i=n.parentID,l=n.allowHorizontal,f=u.default.getDropPostion(),d=u.default.getDraggedElement(),p=!t||!t.id,m=-1,h=t.id&&e.state.droppedElements.filter(function(e,n){return e.id===t.id&&(m=n,!0)}).length,v=m===f,g=[].concat(e.state.droppedElements),b=!1;if(p||h){if(v)return u.default.error("Duplicate or invalid ID");b=!0,g=g.map(function(e){return e.id===t.id?r({},e,{remove:!0}):e})}var y=null;if(t.parentID&&t.dropzoneID){var E=s.default.traverseAndReturnElement(t.id,t.dropzoneID,t.parentID);!function e(t){t.forEach(function(t){t.fields&&(t.initialElements=t.fields,e(t.fields))})}(y=E&&E.fields||[])}var _=r({},t,{key:t.id,dropzoneID:o,parentID:i,allowHorizontal:l,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,updateElement:e._updateElement,initialElements:y||e.state.initialElements,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement});return g=f>0?[].concat(c(g.slice(0,f)),[_],c(g.slice(f))):[_].concat(c(g)),v||(g=g.filter(function(e){return!e.remove})),a&&g.length>a?u.default.error("Maximum capacity of canvas("+o+") is "+a):(e.setState({droppedElements:g},function(){!b&&d&&"function"==typeof d.checkAndRemoveElement&&d.checkAndRemoveElement(),e._updateState()}),e.canvasRef.current.classList.add("dropping"),setTimeout(function(){e.canvasRef.current&&e.canvasRef.current.classList.remove("dropping")},500),{dropzoneID:o,elements:g})},this._renderDragItem=function(e){var t=u.default.getRegisteredPaletteElements().find(function(t){return t.type===e.type});return t?i.default.createElement(t.component,e):null}};d.propTypes={id:l.default.string.isRequired,capacity:l.default.number,onDrop:l.default.func,onElementMove:l.default.func,allowHorizontal:l.default.bool,initialElements:l.default.arrayOf(Object),parentID:l.default.string.isRequired,placeholder:l.default.oneOfType([l.default.string,l.default.node])},d.defaultProps={initialElements:[],placeholder:"Drop Here",onElementMove:function(){return!0}},t.default=d},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),s=null,u=0,f=[],c=n(5);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(b(r.parts[i],t))}else{var l=[];for(i=0;i<r.parts.length;i++)l.push(b(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:l}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],l={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function m(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",g(t,e.attrs),m(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=u++;n=s||(s=v(t)),r=_.bind(null,n,i,!1),o=_.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",g(t,e.attrs),m(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(l=a[i.id]).refs--,r.push(l)}e&&d(p(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete a[l.id]}}}};var y,E=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"/* Very basic style */\n\n/* Prevent the text contents of draggable elements from being selectable. */\n[draggable] {\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  user-select: none;\n\n  /* Required to make elements draggable in old WebKit */\n  -khtml-user-drag: element;\n  -webkit-user-drag: element;\n}\n\n/* class gets appended to canvas when user dragging over on it */\n.inside {\n  -webkit-box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\n  -moz-box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\n  box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\n}\n\n.trash-box.inside,\n.dropzone.inside.no-space {\n  -webkit-box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.5);\n  -moz-box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.75);\n  box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.75);\n}\n\n.dropzone {\n  width: 100%;\n  padding: 10px;\n  position: relative;\n  box-sizing: border-box;\n  background: #f0faff;\n  border: 1px solid #0277bd;\n}\n\n.dropzone.empty {\n  padding: 40px;\n}\n\n.palette {\n  padding: 10px;\n  background: #fff;\n  box-sizing: border-box;\n  border: 1px solid #01579b;\n}\n\n.drag-item {\n  padding: 10px;\n  color: #01579b;\n  box-sizing: border-box;\n  background-color: #b3e5fc;\n  border: 1px solid #01579b;\n}\n\n.inline.drag-item {\n  margin: 0 10px;\n  display: inline-block;\n}\n\n.dropzone-placeholder {\n  width: 100%;\n  color: #01579b;\n  text-align: center;\n  position: absolute;\n  left: 0;\n  top: calc(50% - 10px);\n  animation-name: changeColor;\n  animation-duration: 2s;\n  animation-timing-function: ease-in-out;\n  animation-iteration-count: infinite;\n}\n\n@keyframes changeColor {\n  25% {\n    transform: scale(1);\n    opacity: 1;\n  }\n\n  75% {\n    transform: scale(1);\n    opacity: 0.5;\n  }\n}\n\n.palette-wrapper .drag-item {\n  color: #fff;\n  background-color: #01579b;\n}\n\n.drag-item + div {\n  margin-top: 10px;\n}\n\n.drag-item.after,\n.drag-item.before {\n  position: relative;\n}\n\n.drag-item.after::after {\n  content: '';\n  position: absolute;\n  width: 50%;\n  height: 1px;\n  background: #14b451;\n  left: 50%;\n  bottom: -1px;\n  border-radius: 50%;\n  transform: translate(-50%, 0);\n  -webkit-box-shadow: 0px 4px 10px 0px rgba(20, 180, 81, 1);\n  -moz-box-shadow: 0px 4px 10px 0px rgba(20, 180, 81, 1);\n  box-shadow: 0px 4px 10px 0px rgba(20, 180, 81, 1);\n}\n\n.drag-item.before::before {\n  content: '';\n  position: absolute;\n  width: 50%;\n  height: 1px;\n  background: #14b451;\n  left: 50%;\n  top: -1px;\n  border-radius: 50%;\n  transform: translate(-50%, 0);\n  -webkit-box-shadow: 0px -1px 10px 0.3px rgba(23, 180, 81, 1);\n  -moz-box-shadow: 0px -1px 10px 0.3px rgba(23, 180, 81, 1);\n  box-shadow: 0px -1px 10px 0.3px rgba(23, 180, 81, 1);\n}\n\n.inline.drag-item.before::before {\n  width: 1px;\n  height: 50%;\n  left: -1px;\n  right: unset;\n  top: 50%;\n  transform: translate(0, -50%);\n}\n\n.inline.drag-item.after::after {\n  width: 1px;\n  height: 50%;\n  right: -1px;\n  left: unset;\n  top: unset;\n  transform: translate(0, -50%);\n}\n\n.trash-box {\n  padding: 30px 10px;\n  margin: 10px 0;\n  color: #b71c1c;\n  background: #ffcdd2;\n  text-align: center;\n  border: 1px solid #b71c1c;\n}\n",""])},function(e,t,n){var r=n(8);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(1)),i=u(n(2)),l=u(n(0)),s=u(n(3));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._onStateChange=function(e){n.setState({currentState:e})},n._renderElementInPreviewMode=function(e){var t={},o=n.registeredPaletteElements.find(function(t){return t.type===e.type});return Array.isArray(e.fields)&&e.fields.forEach(function(e){t[e.dropzoneID]=t[e.dropzoneID]||[],t[e.dropzoneID]=t[e.dropzoneID].concat(n._renderElementInPreviewMode(e))}),a.default.createElement(o.component,r({id:e.id,key:e.id,childNode:t},r({},e,{showPreview:!0,showBasicContent:!1})))},n.state={currentState:s.default.getState()},n.registeredPaletteElements=l.default.getRegisteredPaletteElements(),s.default.addEventListener(n._onStateChange),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"render",value:function(){var e=this.state.currentState[0];return"function"==typeof this.props.children?this.props.children({children:e.fields.map(this._renderElementInPreviewMode)}):a.default.createElement("div",{className:"preview-container"},e.fields.map(this._renderElementInPreviewMode))}}]),t}();f.propTypes={children:i.default.func},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),a=s(o),i=s(n(2)),l=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._manageInsideClass=function(e,t){var r=e.target;n.trashRef.current===r&&r.classList[t]("inside")},n._onDrop=function(e){e.preventDefault(),e.stopPropagation();var t=l.default.getDraggedElement();if(!t)return!1;var r=n.props,o=r.onBeforeTrash,a=r.onAfterTrash,i=t.removeElement,s=o(t);return n._manageInsideClass(e,"remove"),s&&l.default.getAttemptToRemove()&&(i(t.elementID,function(){a()},!0),l.default.setDraggedElement(null)),l.default.setAttemptToRemove(!1),!0},n._onDragOver=function(e){e.preventDefault()},n._onDragLeave=function(e){n._manageInsideClass(e,"remove")},n._onDragEnter=function(e){l.default.getDraggedElement()&&n._manageInsideClass(e,"add")},n.trashRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",{ref:this.trashRef,className:"trash-box",onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDragOver:this._onDragOver,onDrop:this._onDrop},this.props.children||a.default.createElement("span",null,"Trash Box"))}}]),t}();u.propTypes={onBeforeTrash:i.default.func,onAfterTrash:i.default.func,children:i.default.oneOfType([i.default.arrayOf(i.default.element),i.default.element])},u.defaultProps={onBeforeTrash:function(){return!0},onAfterTrash:function(){return!0}},t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=u(a),l=u(n(2)),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),l=0;l<o;l++)a[l]=arguments[l];return n=r=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r._renderList=function(e){var t=s.default.getRegisteredPaletteElements().find(function(t){return t.type===e.type});return t?i.default.createElement(t.component,e):null},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=this,t=this.props.paletteElements;return i.default.createElement("div",{className:"palette"},t.map(function(t){return e._renderList(r({},t,{key:t.id,showBasicContent:!0}))}))}}]),t}();c.propTypes={paletteElements:l.default.arrayOf(function(e){var t=!1;return e.forEach(function(n){n&&!n.id&&(t="`id` is required in all palette element"),e.filter(function(e){return e.id===n.id}).length>1&&(t="`id` of palette element should be unique")}),!t||new Error(t)})},c.defaultProps={paletteElements:[]},t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=u(a),l=u(n(2)),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._dragEnd=function(e){e.stopPropagation(),n.dragElemRef.current.classList.remove("before","after"),s.default.setDraggedElement(null)},n._dragStart=function(e){e.stopPropagation();var t=n.props,r=t.id,o=t.type,a=t.name,i=t.fields,l=t.payload,u=t.dropzoneID,f=t.removeElement,c=t.checkAndRemoveElement,d={id:r,type:o,name:a,payload:l};i&&(d.fields=i),e.dataTransfer.effectAllowed="copy",e.dataTransfer.setData("data",JSON.stringify(d)),u&&s.default.setDraggedElement({elementID:r,dropzoneID:u,removeElement:f,checkAndRemoveElement:c})},n._onDragOver=function(e){var t=n.dragElemRef.current.getBoundingClientRect();if(!n.props.spaceAvailable)return!1;if(n.props.allowHorizontal){var r=e.clientX;if(r>=t.x&&r<=t.x+t.width)r<t.x+t.width/2?(n.dragElemRef.current.classList.remove("after"),n.dragElemRef.current.classList.add("before"),s.default.setDropPostion(n.props.index)):(n.dragElemRef.current.classList.remove("before"),n.dragElemRef.current.classList.add("after"),s.default.setDropPostion(n.props.index+1))}else{var o=e.clientY;if(o>=t.y&&o<=t.y+t.height)o<t.y+t.height/2?(n.dragElemRef.current.classList.remove("after"),n.dragElemRef.current.classList.add("before"),s.default.setDropPostion(n.props.index)):(n.dragElemRef.current.classList.remove("before"),n.dragElemRef.current.classList.add("after"),s.default.setDropPostion(n.props.index+1))}return!0},n._onDragLeave=function(){n.dragElemRef.current.classList.remove("before","after")},n.dragElemRef=i.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillReceiveProps",value:function(e){this.props.initDone!==e.initDone&&e.initDone&&this.props.updateState()}},{key:"render",value:function(){var e=this.props,t=e.elementProps,n=e.draggable,o=e.allowHorizontal,a=null;return this.props.dropzoneID&&(a={onDragOver:this._onDragOver,onDragLeave:this._onDragLeave}),n&&(a=r({},a,{draggable:!0})),i.default.createElement("div",r({ref:this.dragElemRef,className:"drag-item "+(o?"inline":""),onDragStart:this._dragStart,onDragEnd:this._dragEnd},t,a),this.props.children)}}]),t}();f.propTypes={id:l.default.string.isRequired,name:l.default.string,initDone:l.default.bool,index:l.default.number,allowHorizontal:l.default.bool,fields:l.default.instanceOf(Array),draggable:l.default.bool,spaceAvailable:l.default.bool,updateState:l.default.func,dropzoneID:l.default.string,payload:l.default.instanceOf(Object),elementProps:l.default.instanceOf(Object),type:l.default.string.isRequired,children:l.default.oneOfType([l.default.arrayOf(l.default.element),l.default.element]).isRequired,removeElement:l.default.func,checkAndRemoveElement:l.default.func},f.defaultProps={checkAndRemoveElement:function(){return!0},elementProps:null,payload:null,draggable:!0,updateState:function(){return!0}},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),o=a(n(3));function a(e){return e&&e.__esModule?e:{default:e}}var i=new function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.notifyStateChange=function(){t.event.change.forEach(function(e){return e(o.default.getState())})},this.notifyStateFlush=function(e){e&&t.notifyStateChange(),t.event.flush.forEach(function(e){return e(!0)})},this.notifyElementUpdate=function(e){t.event.updateElement.forEach(function(t){return t(e)})},this.notifyElementRemove=function(e){t.event.removeElement.forEach(function(t){return t(e)})},this.addEventListener=function(e,n){var o=null;return"function"!=typeof n?(r.default.error("`cb` param has to be function"),!1):(Object.prototype.hasOwnProperty.call(t.event,e)?(t.event[e].push(n),o=n):r.default.error("No such event"),o)},this.removeEventListener=function(e,n){Object.prototype.hasOwnProperty.call(t.event,e)?t.event[e]=t.event[e].filter(function(e){return e!==n}):r.default.error("No such event")},this.event={change:[],flush:[],removeElement:[],updateElement:[]}};t.default=i},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,l,s){if(r(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var f=[n,o,a,i,l,s],c=0;(u=new Error(t.replace(/%s/g,function(){return f[c++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(17),o=n(16),a=n(15);e.exports=function(){function e(e,t,n,r,i,l){l!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=i(n(1)),a=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return o.default.createElement("div",{className:"main-canvas"},o.default.createElement(a.default,r({},e,{parentID:"root",id:"root",initDone:!0})))}},function(e,t,n){"use strict";var r=c(n(19)),o=c(n(4)),a=c(n(13)),i=c(n(12)),l=c(n(11)),s=c(n(10)),u=c(n(3)),f=c(n(0));function c(e){return e&&e.__esModule?e:{default:e}}n(9),e.exports={Canvas:r.default,Dropzone:o.default,Draggable:a.default,Palette:i.default,Trash:l.default,Preview:s.default,state:u.default,core:f.default,registerPaletteElements:f.default.registerPaletteElements}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,