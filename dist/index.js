module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={};this.getAttemptToRemove=function(){return t.attemptToRemove},this.setAttemptToRemove=function(e){t.attemptToRemove=e},this.setDraggedElement=function(e){t.draggedElement=e},this.getDraggedElement=function(){return t.draggedElement},this.registerPaletteElements=function(e){t.registeredPaletteElements=e},this.getRegisteredPaletteElements=function(){return t.registeredPaletteElements||[]},this.setDropPostion=function(e){t.dropPosition=e},this.getDropPostion=function(){return t.dropPosition},this.error=console.error,this.log=console.log};t.default=r},function(e,t){e.exports=require("react")},function(e,t,n){e.exports=n(7)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(9),i=(r=a)&&r.__esModule?r:{default:r};var l=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={},n=["id","type","name","payload","dropzoneID","parentID"];t.tree=[{id:"root",fields:[]}];var r=function e(n,r,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.tree,i=a.find((function(e){return e.id===r})),l=!1;if(i){if(n===r)i.fields=o;else if(i.fields&&o.length){var u=[],f=i.fields.filter((function(e){return e.dropzoneID===n}));f.length!==o.length?i.fields=o.concat(i.fields.filter((function(e){return e.dropzoneID!==n}))):(o.forEach((function(e){-1===i.fields.findIndex((function(t){return t.id===e.id}))&&u.push(e)})),u.length||(i.fields=i.fields.map((function(e){return o.find((function(t){return t.id===e.id}))||e})))),u.length&&(i.fields=i.fields.concat(u))}else n&&i.fields?i.fields=i.fields.filter((function(e){return e.dropzoneID!==n})):i.fields=o;l=!0}else for(var s=0;s<a.length;s++){var c=a[s].fields,d=!1;if(c&&(d=e(n,r,o,c)),d)break}return l},a=function e(n,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.tree,a=o.find((function(e){return e.id===r}));if(!a)for(var i=0;i<o.length;i++){var l=o[i];if(l.fields){var u=e(n,r,l.fields);if(u)return u}}return a},l=function(e,t,n){var r=a(t,n);return r?r.fields.find((function(t){return t.id===e})):null},u=function(e,t){var r={};return e?(Object.keys(e).forEach((function(o){"function"!=typeof e[o]&&(t||!t&&-1!==n.indexOf(o))&&(r[o]=e[o])})),r):null},f=function(){return u(l.apply(void 0,arguments))};this.updateState=function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},l=arguments[4];r(e,n,o),a(t.tree),i.default.notifyStateChange(),l&&i.default.notifyElementRemove({dropzoneID:e,parentID:n,dispatchElementRemove:l,trashed:!0})},this.getElementParent=a,this.getElement=f,this.removeElement=function(e,t,n,r){var o=l(e,t,n);return!!o&&(o.removeElement(e,r),i.default.notifyElementRemove({elementID:e,dropzoneID:t,parentID:n,trashed:!1}),!0)},this.updateElement=function(e,t,n,r,a){var u=l(e,t,n);return!!u&&(u.updateElement(o({},r,{id:e}),a),i.default.notifyElementUpdate(f(e,t,n)),!0)},this.traverseAndReturnElement=l,this.getState=function(){return t.tree},this.getStorableState=function(){return t.tree[0].fields.map((function(e){return function e(t){var n=[],r=u(t,!0);return t.fields&&t.fields.length&&t.fields.forEach((function(t){n.push(e(t))})),n.length&&(r.initialElements=[],r.fields=[],n.forEach((function(e){r.initialElements.push(e),r.fields.push(e)}))),r}(e)}))},this.clearState=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=t.tree[0],r=n.fields.length;return n.fields.length||(i.default.notifyStateFlush(),e()),n.fields.forEach((function(t,n){t.flushDroppedElements((function(){n===r-1&&(i.default.notifyStateFlush(!0),e())}))})),!0},this.addEventListener=i.default.addEventListener,this.removeEventListener=i.default.removeEventListener};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=s(a),l=s(n(2)),u=s(n(3)),f=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}function c(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return p.call(n),n.canvasRef=i.default.createRef(),n.state={initialElements:[],droppedElements:[],initDone:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentWillMount",value:function(){this._setInitialElements(this.props.initialElements)}},{key:"componentWillReceiveProps",value:function(e){var t=e.initialElements;this._setInitialElements(t)}},{key:"render",value:function(){var e=this,t=this.state.droppedElements,n=this.props,o=n.capacity,a=n.id,l=n.placeholder,u=!o||o>t.length;return i.default.createElement("div",{ref:this.canvasRef,className:(u?"":"no-space")+" "+("root"===a?"canvas":"")+" "+(t.length?"":"empty")+" dropzone",onDragOver:this._onDragOver,onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDrop:this._onDrop,onDragEnd:this._onDragEnd},t.map((function(t,n){return e._renderDragItem(r({},t,{index:n,spaceAvailable:u,initDone:e.state.initDone,dropzoneProps:{initDone:e.state.initDone,parentID:t.id}}))})),t.length?null:i.default.createElement("p",{className:"dropzone-placeholder"},l))}}]),t}(a.Component),p=function(){var e=this;this.dangerouslySetElements=function(t,n){var o=[];o="function"==typeof t?t(e.state.droppedElements)||[]:t;var a=e.props,i=a.id,l=a.parentID;o=o.map((function(t){return r({},t,{dropzoneID:i,parentID:l,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,updateElement:e._updateElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement})})),e.setState({initialElements:o,droppedElements:o},(function(){return e._updateState(n)}))},this._unmarkDragElements=function(){[].forEach.call(e.canvasRef.current.querySelectorAll(".drag-item"),(function(e){return e.classList.remove("before","after")}))},this._setInitialElements=function(t){if(Array.isArray(t)&&t.length&&!e.state.initDone&&!e.state.initialElements.length){var n=e.props,o=n.id,a=n.parentID,i=t.map((function(t){return r({},t,{key:t.id,dropzoneID:o,parentID:a,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,updateElement:e._updateElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement})}));e.setState({initialElements:i,droppedElements:i},(function(){return e._updateState((function(){e.setState({initDone:!0})}))}))}},this._manageInsideClass=function(t,n){var r=t.target;e.canvasRef.current===r&&r.classList[n]("inside")},this._removeElement=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r=arguments[2],o=e.state.droppedElements.findIndex((function(e){return e.id===t}));e.setState({droppedElements:e.state.droppedElements.filter((function(e,t){return t!==o}))},(function(){return e._updateState(n,r?t:null)}))},this._updateElement=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},o=e.state.droppedElements.findIndex((function(e){return e.id===t.id}));if(-1===o)return n(null);var a=["name","type","payload"],i={};return Object.keys(t).forEach((function(e){-1!==a.indexOf(e)&&(i[e]=t[e])})),e.setState({droppedElements:e.state.droppedElements.map((function(e){return e.id===t.id?r({},e,i):e}))},(function(){return e._updateState(n)})),!0},this._updateState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=arguments[1],r=e.props,o=r.id,a=r.parentID;u.default.updateState(o,a,e.state.droppedElements,t,n)},this._flushDroppedElements=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};e.setState({initialElements:[],droppedElements:[]},(function(){return e._updateState(t)}))},this._checkAndRemoveElement=function(){var t=f.default.getDraggedElement(),n=t.removeElement,r=t.elementID,o=e.props.onElementMove(t),a=!f.default.getAttemptToRemove();o&&a&&n(r)},this._onDragOver=function(e){e.preventDefault(),e.stopPropagation()},this._onDragLeave=function(t){e._manageInsideClass(t,"remove"),f.default.setAttemptToRemove(!0)},this._onDragEnter=function(t){e._manageInsideClass(t,"add"),f.default.setAttemptToRemove(!1)},this._onDrop=function(t){t.preventDefault(),t.stopPropagation();var n=e.state.droppedElements;f.default.setAttemptToRemove(!1),e._manageInsideClass(t,"remove");var o=e.props.onDrop,a=JSON.parse(t.dataTransfer.getData("data"));return a=r({},a),e._unmarkDragElements(),o?o(a,e._addElement,{dropIndex:n.length?0:f.default.getDropPostion()+1,currentElements:n}):e._addElement(a)},this._addElement=function(t){var n=e.props,o=n.id,a=n.capacity,i=n.parentID,l=n.allowHorizontal,s=f.default.getDropPostion(),d=f.default.getDraggedElement(),p=!t||!t.id,m=-1,h=t.id&&e.state.droppedElements.filter((function(e,n){return e.id===t.id&&(m=n,!0)})).length,v=m===s,g=[].concat(e.state.droppedElements),E=!1;if(p||h){if(v)return f.default.error("Duplicate or invalid ID");E=!0,g=g.map((function(e){return e.id===t.id?r({},e,{remove:!0}):e}))}var y=null;if(t.dropzoneID&&t.parentID){var _=u.default.traverseAndReturnElement(t.id,t.dropzoneID,t.parentID);!function e(t){t.forEach((function(t){t.fields&&(t.initialElements=t.fields,e(t.fields))}))}(y=_&&_.fields||[])}var b=r({},t,{key:t.id,dropzoneID:o,parentID:i,allowHorizontal:l,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,updateElement:e._updateElement,initialElements:y||e.state.initialElements,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement});return g=s>0?[].concat(c(g.slice(0,s)),[b],c(g.slice(s))):[b].concat(c(g)),v||(g=g.filter((function(e){return!e.remove}))),a&&g.length>a?f.default.error("Maximum capacity of canvas("+o+") is "+a):(e.setState({droppedElements:g},(function(){!E&&d&&"function"==typeof d.checkAndRemoveElement&&d.checkAndRemoveElement(),e._updateState()})),e.canvasRef.current.classList.add("dropping"),setTimeout((function(){e.canvasRef.current&&e.canvasRef.current.classList.remove("dropping")}),500),{dropzoneID:o,elements:g})},this._renderDragItem=function(e){var t=f.default.getRegisteredPaletteElements().find((function(t){return t.type===e.type}));return t?i.default.createElement(t.component,e):null}};d.propTypes={id:l.default.string.isRequired,capacity:l.default.number,onDrop:l.default.func,onElementMove:l.default.func,allowHorizontal:l.default.bool,initialElements:l.default.arrayOf(Object),parentID:l.default.string.isRequired,placeholder:l.default.oneOfType([l.default.string,l.default.node])},d.defaultProps={initialElements:[],placeholder:"Drop Here",onElementMove:function(){return!0}},t.default=d},function(e,t,n){"use strict";var r=c(n(6)),o=c(n(4)),a=c(n(10)),i=c(n(11)),l=c(n(12)),u=c(n(13)),f=c(n(3)),s=c(n(0));function c(e){return e&&e.__esModule?e:{default:e}}e.exports={Canvas:r.default,Dropzone:o.default,Draggable:a.default,Palette:i.default,Trash:l.default,Preview:u.default,state:f.default,core:s.default,registerPaletteElements:s.default.registerPaletteElements}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=i(n(1)),a=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return o.default.createElement("div",{className:"main-canvas"},o.default.createElement(a.default,r({},e,{parentID:"root",id:"root",initDone:!0})))}},function(e,t,n){"use strict";var r=n(8);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),o=a(n(3));function a(e){return e&&e.__esModule?e:{default:e}}var i=new function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.notifyStateChange=function(){t.event.change.forEach((function(e){return e(o.default.getState())}))},this.notifyStateFlush=function(e){e&&t.notifyStateChange(),t.event.flush.forEach((function(e){return e(!0)}))},this.notifyElementUpdate=function(e){t.event.updateElement.forEach((function(t){return t(e)}))},this.notifyElementRemove=function(e){t.event.removeElement.forEach((function(t){return t(e)}))},this.addEventListener=function(e,n){var o=null;return"function"!=typeof n?(r.default.error("`cb` param has to be function"),!1):(Object.prototype.hasOwnProperty.call(t.event,e)?(t.event[e].push(n),o=n):r.default.error("No such event"),o)},this.removeEventListener=function(e,n){Object.prototype.hasOwnProperty.call(t.event,e)?t.event[e]=t.event[e].filter((function(e){return e!==n})):r.default.error("No such event")},this.event={change:[],flush:[],removeElement:[],updateElement:[]}};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=f(a),l=f(n(2)),u=f(n(0));function f(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._dragEnd=function(e){e.stopPropagation(),n.dragElemRef.current.classList.remove("before","after"),u.default.setDraggedElement(null)},n._dragStart=function(e){e.stopPropagation();var t=n.props,r=t.id,o=t.type,a=t.name,i=t.fields,l=t.payload,f=t.parentID,s=t.dropzoneID,c=t.removeElement,d=t.checkAndRemoveElement,p={id:r,type:o,name:a,payload:l,parentID:f,dropzoneID:s};i&&(p.fields=i),e.dataTransfer.effectAllowed="copy",e.dataTransfer.setData("data",JSON.stringify(p)),s&&u.default.setDraggedElement({elementID:r,dropzoneID:s,removeElement:c,checkAndRemoveElement:d})},n._onDragOver=function(e){var t=n.dragElemRef.current.getBoundingClientRect();if(!n.props.spaceAvailable)return!1;if(n.props.allowHorizontal){var r=e.clientX;if(r>=t.x&&r<=t.x+t.width)r<t.x+t.width/2?(n.dragElemRef.current.classList.remove("after"),n.dragElemRef.current.classList.add("before"),u.default.setDropPostion(n.props.index)):(n.dragElemRef.current.classList.remove("before"),n.dragElemRef.current.classList.add("after"),u.default.setDropPostion(n.props.index+1))}else{var o=e.clientY;if(o>=t.y&&o<=t.y+t.height)o<t.y+t.height/2?(n.dragElemRef.current.classList.remove("after"),n.dragElemRef.current.classList.add("before"),u.default.setDropPostion(n.props.index)):(n.dragElemRef.current.classList.remove("before"),n.dragElemRef.current.classList.add("after"),u.default.setDropPostion(n.props.index+1))}return!0},n._onDragLeave=function(){n.dragElemRef.current.classList.remove("before","after")},n.dragElemRef=i.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentWillReceiveProps",value:function(e){this.props.initDone!==e.initDone&&e.initDone&&this.props.updateState()}},{key:"render",value:function(){var e=this.props,t=e.elementProps,n=e.draggable,o=e.allowHorizontal,a=null;return this.props.dropzoneID&&(a={onDragOver:this._onDragOver,onDragLeave:this._onDragLeave}),n&&(a=r({},a,{draggable:!0})),i.default.createElement("div",r({ref:this.dragElemRef,className:"drag-item "+(o?"inline":""),onDragStart:this._dragStart,onDragEnd:this._dragEnd},t,a),this.props.children)}}]),t}(a.Component);s.propTypes={id:l.default.string.isRequired,name:l.default.string,initDone:l.default.bool,index:l.default.number,allowHorizontal:l.default.bool,fields:l.default.instanceOf(Array),draggable:l.default.bool,spaceAvailable:l.default.bool,updateState:l.default.func,dropzoneID:l.default.string,parentID:l.default.string,payload:l.default.instanceOf(Object),elementProps:l.default.instanceOf(Object),type:l.default.string.isRequired,children:l.default.oneOfType([l.default.arrayOf(l.default.element),l.default.element]).isRequired,removeElement:l.default.func,checkAndRemoveElement:l.default.func},s.defaultProps={checkAndRemoveElement:function(){return!0},elementProps:null,payload:null,draggable:!0,updateState:function(){return!0}},t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=f(a),l=f(n(2)),u=f(n(0));function f(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var d=function(e){function t(){var e,n,r;s(this,t);for(var o=arguments.length,a=Array(o),l=0;l<o;l++)a[l]=arguments[l];return n=r=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r._renderList=function(e){var t=u.default.getRegisteredPaletteElements().find((function(t){return t.type===e.type}));return t?i.default.createElement(t.component,e):null},c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){var e=this,t=this.props.paletteElements;return i.default.createElement("div",{className:"palette"},t.map((function(t){return e._renderList(r({},t,{key:t.id,showBasicContent:!0}))})))}}]),t}(a.Component);d.propTypes={paletteElements:l.default.arrayOf((function(e){var t=!1;return e.forEach((function(n){n&&!n.id&&(t="`id` is required in all palette element"),e.filter((function(e){return e.id===n.id})).length>1&&(t="`id` of palette element should be unique")})),!t||new Error(t)}))},d.defaultProps={paletteElements:[]},t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),a=u(o),i=u(n(2)),l=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._manageInsideClass=function(e,t){var r=e.target;n.trashRef.current===r&&r.classList[t]("inside")},n._onDrop=function(e){e.preventDefault(),e.stopPropagation();var t=l.default.getDraggedElement();if(!t)return!1;var r=n.props,o=r.onBeforeTrash,a=r.onAfterTrash,i=t.removeElement,u=o(t);return n._manageInsideClass(e,"remove"),u&&l.default.getAttemptToRemove()&&(i(t.elementID,(function(){a()}),!0),l.default.setDraggedElement(null)),l.default.setAttemptToRemove(!1),!0},n._onDragOver=function(e){e.preventDefault()},n._onDragLeave=function(e){n._manageInsideClass(e,"remove")},n._onDragEnter=function(e){l.default.getDraggedElement()&&n._manageInsideClass(e,"add")},n.trashRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"render",value:function(){return a.default.createElement("div",{ref:this.trashRef,className:"trash-box",onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDragOver:this._onDragOver,onDrop:this._onDrop},this.props.children||a.default.createElement("span",null,"Trash Box"))}}]),t}(o.Component);f.propTypes={onBeforeTrash:i.default.func,onAfterTrash:i.default.func,children:i.default.oneOfType([i.default.arrayOf(i.default.element),i.default.element])},f.defaultProps={onBeforeTrash:function(){return!0},onAfterTrash:function(){return!0}},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n(1)),i=f(n(2)),l=f(n(0)),u=f(n(3));function f(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._onStateChange=function(e){n.setState({currentState:e})},n._renderElementInPreviewMode=function(e){var t={},o=n.registeredPaletteElements.find((function(t){return t.type===e.type}));return Array.isArray(e.fields)&&e.fields.forEach((function(e){t[e.dropzoneID]=t[e.dropzoneID]||[],t[e.dropzoneID]=t[e.dropzoneID].concat(n._renderElementInPreviewMode(e))})),a.default.createElement(o.component,r({id:e.id,key:e.id,childNode:t},r({},e,{showPreview:!0,showBasicContent:!1})))},n.state={currentState:u.default.getState()},n.registeredPaletteElements=l.default.getRegisteredPaletteElements(),u.default.addEventListener(n._onStateChange),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){var e=this.state.currentState[0];return"function"==typeof this.props.children?this.props.children({children:e.fields.map(this._renderElementInPreviewMode)}):a.default.createElement("div",{className:"preview-container"},e.fields.map(this._renderElementInPreviewMode))}}]),t}(a.default.Component);s.propTypes={children:i.default.func},t.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29yZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3N0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Ryb3B6b25lL0Ryb3B6b25lLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYW52YXMvQ2FudmFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRHJhZ2dhYmxlL0RyYWdnYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9QYWxldHRlL1BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVHJhc2gvVHJhc2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUHJldmlldy9QcmV2aWV3LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY29yZSIsInRoaXMiLCJnZXRBdHRlbXB0VG9SZW1vdmUiLCJhdHRlbXB0VG9SZW1vdmUiLCJzZXRBdHRlbXB0VG9SZW1vdmUiLCJzdGF0dXMiLCJzZXREcmFnZ2VkRWxlbWVudCIsImRyYWdnZWRFbGVtZW50IiwiZ2V0RHJhZ2dlZEVsZW1lbnQiLCJyZWdpc3RlclBhbGV0dGVFbGVtZW50cyIsInJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMiLCJnZXRSZWdpc3RlcmVkUGFsZXR0ZUVsZW1lbnRzIiwic2V0RHJvcFBvc3Rpb24iLCJkcm9wUG9zaXRpb24iLCJnZXREcm9wUG9zdGlvbiIsImVycm9yIiwiY29uc29sZSIsImxvZyIsInJlcXVpcmUiLCJzdGF0ZSIsInNoYXJlYWJsZUVsZW1lbnRQcm9wcyIsInRyZWUiLCJpZCIsImZpZWxkcyIsInRyYXZlcnNlQW5kVXBkYXRlVHJlZSIsImRyb3B6b25lSUQiLCJwYXJlbnRJRCIsInVwZGF0ZWRGaWVsZHMiLCJtYXRjaGVkUGFyZW50Q2FudmFzIiwiZmluZCIsImZpZWxkIiwicmV0dXJuU3RhdHVzIiwibGVuZ3RoIiwiZmllbGRzVG9CZUFkZGVkIiwibWF0Y2hlZERyb3B6b25lRmllbGRzIiwiZmlsdGVyIiwiZiIsImNvbmNhdCIsImZvckVhY2giLCJ1RmllbGQiLCJmaW5kSW5kZXgiLCJwdXNoIiwibWFwIiwidWYiLCJjaGlsZEZpZWxkcyIsInRyYXZlcnNlQW5kUmV0dXJuUGFyZW50IiwiZm91bmRQYXJlbnQiLCJlbGVtZW50IiwidHJhdmVyc2VBbmRSZXR1cm5FbGVtZW50IiwiZWxlbWVudElEIiwiZmllbGRQYXJlbnQiLCJyZW1vdmVTZW5zaXRpdmVQcm9wcyIsIm9ubHlSZW1vdmVGdW5jdGlvbnMiLCJzaGFyZWFibGVFbGVtZW50Iiwia2V5cyIsImluZGV4T2YiLCJnZXRFbGVtZW50IiwidXBkYXRlU3RhdGUiLCJjYiIsImRpc3BhdGNoRWxlbWVudFJlbW92ZSIsIm5vdGlmeVN0YXRlQ2hhbmdlIiwibm90aWZ5RWxlbWVudFJlbW92ZSIsInRyYXNoZWQiLCJnZXRFbGVtZW50UGFyZW50IiwicmVtb3ZlRWxlbWVudCIsInVwZGF0ZUVsZW1lbnQiLCJuZXdEYXRhIiwibm90aWZ5RWxlbWVudFVwZGF0ZSIsImdldFN0YXRlIiwiZ2V0U3RvcmFibGVTdGF0ZSIsInRyYXZlcnNlQW5kVGFrZVNuYXBzaG90Iiwic3ViRmllbGRzIiwibmVjZXNzYXJ5RGV0YWlscyIsImluaXRpYWxFbGVtZW50cyIsInNmIiwiY2xlYXJTdGF0ZSIsInJvb3ROb2RlIiwidG9wTGV2ZWxGaWVsZHMiLCJub3RpZnlTdGF0ZUZsdXNoIiwidG9wTGV2ZWxFbGVtZW50IiwiZmx1c2hEcm9wcGVkRWxlbWVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkRyb3B6b25lIiwicHJvcHMiLCJjYW52YXNSZWYiLCJjcmVhdGVSZWYiLCJkcm9wcGVkRWxlbWVudHMiLCJpbml0RG9uZSIsIl9zZXRJbml0aWFsRWxlbWVudHMiLCJjYXBhY2l0eSIsInBsYWNlaG9sZGVyIiwic3BhY2VBdmFpbGFibGUiLCJyZWYiLCJjbGFzc05hbWUiLCJvbkRyYWdPdmVyIiwiX29uRHJhZ092ZXIiLCJvbkRyYWdMZWF2ZSIsIl9vbkRyYWdMZWF2ZSIsIm9uRHJhZ0VudGVyIiwiX29uRHJhZ0VudGVyIiwib25Ecm9wIiwiX29uRHJvcCIsIm9uRHJhZ0VuZCIsIl9vbkRyYWdFbmQiLCJlIiwiX3JlbmRlckRyYWdJdGVtIiwiaW5kZXgiLCJkcm9wem9uZVByb3BzIiwiZGFuZ2Vyb3VzbHlTZXRFbGVtZW50cyIsImRhdGEiLCJkb25lIiwiZWxlbWVudHMiLCJzaG93QmFzaWNDb250ZW50IiwiX3VwZGF0ZVN0YXRlIiwiX3JlbW92ZUVsZW1lbnQiLCJfdXBkYXRlRWxlbWVudCIsIl9mbHVzaERyb3BwZWRFbGVtZW50cyIsImNoZWNrQW5kUmVtb3ZlRWxlbWVudCIsIl9jaGVja0FuZFJlbW92ZUVsZW1lbnQiLCJzZXRTdGF0ZSIsIl91bm1hcmtEcmFnRWxlbWVudHMiLCJjdXJyZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImNsYXNzTGlzdCIsInJlbW92ZSIsIkFycmF5IiwiaXNBcnJheSIsInVwZGF0ZWRJbml0aWFsSXRlbXMiLCJfbWFuYWdlSW5zaWRlQ2xhc3MiLCJhY3Rpb24iLCJ0YXJnZXQiLCJlbGVtZW50SW5kZXgiLCJzdXBwb3J0ZWRLZXlzIiwibmV3RWxlbWVudERhdGEiLCJlbGVtZW50TW92ZWQiLCJvbkVsZW1lbnRNb3ZlIiwiYXR0ZW1wdFRvTW92ZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiSlNPTiIsInBhcnNlIiwiZGF0YVRyYW5zZmVyIiwiZ2V0RGF0YSIsIl9hZGRFbGVtZW50IiwiZHJvcEluZGV4IiwiY3VycmVudEVsZW1lbnRzIiwidXBkYXRlZERhdGEiLCJhbGxvd0hvcml6b250YWwiLCJpbnZhbGlkVXBkYXRlZERhdGEiLCJpbmRleE9mUHJlc2VudEVsZW1lbnQiLCJrZXlBbHJlYWR5UHJlc2VudCIsImlzU2FtZUluZGV4IiwibmV3RWxlbWVudHMiLCJlbGVtZW50QWxyZWFkeVJlbW92ZWQiLCJpbml0aWFsRWxlbWVudHNUb0JpbmQiLCJvbGRDb3B5IiwiYXNzaWduSW5pdGlhbEVsZW1lbnRzIiwibGlzdCIsImVsZW1lbnRUb0Ryb3AiLCJzbGljZSIsImFkZCIsInNldFRpbWVvdXQiLCJ0eXBlIiwiY29tcG9uZW50IiwicHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIm51bWJlciIsImZ1bmMiLCJib29sIiwiYXJyYXlPZiIsIm9uZU9mVHlwZSIsIm5vZGUiLCJkZWZhdWx0UHJvcHMiLCJDYW52YXMiLCJEcmFnZ2FibGUiLCJQYWxldHRlIiwiVHJhc2giLCJQcmV2aWV3IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZXJyIiwiRXJyb3IiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsInN5bWJvbCIsImFueSIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJycG1FdmVudCIsImV2ZW50IiwiY2hhbmdlIiwidHJpZ2dlckNoYW5nZSIsImZsdXNoIiwiZXZlbnROYW1lIiwicmV0dXJuQ0IiLCJfZHJhZ0VuZCIsImRyYWdFbGVtUmVmIiwiX2RyYWdTdGFydCIsInBheWxvYWQiLCJlZmZlY3RBbGxvd2VkIiwic2V0RGF0YSIsInN0cmluZ2lmeSIsImVsZW1Db3JkIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZHJhZ0VsZW1YIiwiY2xpZW50WCIsIngiLCJ3aWR0aCIsImRyYWdFbGVtWSIsImNsaWVudFkiLCJ5IiwiaGVpZ2h0IiwibmV4dFByb3BzIiwiZWxlbWVudFByb3BzIiwiZHJhZ2dhYmxlIiwib25EcmFnU3RhcnQiLCJjaGlsZHJlbiIsIl9yZW5kZXJMaXN0IiwicGFsZXR0ZUVsZW1lbnRzIiwiaXRlbSIsInByb3BWYWx1ZSIsImlzRXJyb3IiLCJ0cmFzaFJlZiIsImVsZW1lbnRUb0JlVHJhc2hlZCIsIm9uQmVmb3JlVHJhc2giLCJvbkFmdGVyVHJhc2giLCJfb25TdGF0ZUNoYW5nZSIsIm5ld1N0YXRlIiwiY3VycmVudFN0YXRlIiwiX3JlbmRlckVsZW1lbnRJblByZXZpZXdNb2RlIiwiZWxlbWVudERhdGEiLCJjaGlsZE5vZGUiLCJzaG93UHJldmlldyIsInJvb3QiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiIyQkFDRSxJQUFJQSxF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YSxFQUFNeEksa0JBQWtCLE9BM0MzRCxFQUFLOUYsTUFBUSxDQUNYa08sYUFBYyxVQUFNakwsWUFHdEIsRUFBSzFELDBCQUE0QixVQUFLQywrQkFDdEMsVUFBTXNFLGlCQUFpQixFQUFLa0ssZ0JBUlgsRSwwV0FvRGpCLElBQU1PLEVBQU96UCxLQUFLa0IsTUFBTWtPLGFBQWEsR0FHckMsTUFBbUMsbUJBQXhCcFAsS0FBS21GLE1BQU1xSixTQUNieE8sS0FBS21GLE1BQU1xSixTQUFTLENBQ3pCQSxTQUFVaUIsRUFBS25PLE9BQU9tQixJQUFJekMsS0FBS3FQLCtCQU1qQywrQkFBS3hKLFVBQVUscUJBRVg0SixFQUFLbk8sT0FBT21CLElBQUl6QyxLQUFLcVAsa0MsR0FsRVQsVUFBTUssV0F5RTVCeEUsRUFBUWQsVUFBWSxDQUNsQm9FLFNBQVUsVUFBVWhFLE0sVUFHUFUiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNSk7XG4iLCJjbGFzcyBDb3JlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIC8vIG1haW4gb2JqZWN0L3N0b3JlXHJcbiAgICBjb25zdCBjb3JlID0ge307XHJcblxyXG4gICAgLy8gYWxsIHB1YmxpYyBnZXR0ZXIvc2V0dGVyIGdvZXMgaGVyZVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZnVuY3Rpb24gdG8gZ2V0IGF0dGVtcHRUb1JlbW92ZVxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IGF0dGVtcHRUb1JlbW92ZVxyXG4gICAgICovXHJcbiAgICB0aGlzLmdldEF0dGVtcHRUb1JlbW92ZSA9ICgpID0+IChjb3JlLmF0dGVtcHRUb1JlbW92ZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBmdW5jdGlvbiB0byBzZXQgdXNlcidzIGF0dGVtcHQgdG8gcmVtb3ZlIHRoZSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHN0YXR1c1xyXG4gICAgICovXHJcbiAgICB0aGlzLnNldEF0dGVtcHRUb1JlbW92ZSA9IChzdGF0dXMpID0+IHtcclxuICAgICAgY29yZS5hdHRlbXB0VG9SZW1vdmUgPSBzdGF0dXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZnVuY3Rpb24gdG8gc2V0IGRyYWdnZWQgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRyYWdnZWRFbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHRoaXMuc2V0RHJhZ2dlZEVsZW1lbnQgPSAoZHJhZ2dlZEVsZW1lbnQpID0+IHtcclxuICAgICAgY29yZS5kcmFnZ2VkRWxlbWVudCA9IGRyYWdnZWRFbGVtZW50O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIHJldHVybiBkcmFnZ2VkIGVsZW1lbnRcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuZ2V0RHJhZ2dlZEVsZW1lbnQgPSAoKSA9PiAoY29yZS5kcmFnZ2VkRWxlbWVudCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBmdW5jdGlvbiB0byByZWdpc3RlciBwYWxldHRlIGVsZW1lbnRzXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSByZWdpc3RlcmVkUGFsZXR0ZUVsZW1lbnRzIC0gcGFsZXR0ZSBlbGVtZW50c1xyXG4gICAgICovXHJcbiAgICB0aGlzLnJlZ2lzdGVyUGFsZXR0ZUVsZW1lbnRzID0gKHJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMpID0+IHtcclxuICAgICAgY29yZS5yZWdpc3RlcmVkUGFsZXR0ZUVsZW1lbnRzID0gcmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBmdW5jdGlvbiB0byByZXR1cm4gcmVnaXN0ZXJlZCBwYWxldHRlIGVsZW1lbnRzXHJcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IC0gYXJyYXkgb2YgcGFsZXR0ZSBlbGVtZW50c1xyXG4gICAgICovXHJcbiAgICB0aGlzLmdldFJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMgPSAoKSA9PiAoY29yZS5yZWdpc3RlcmVkUGFsZXR0ZUVsZW1lbnRzIHx8IFtdKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIHNldCBkcm9wIHBvc2l0aW9uXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHJvcFBvc2l0aW9uXHJcbiAgICAgKi9cclxuICAgIHRoaXMuc2V0RHJvcFBvc3Rpb24gPSAoZHJvcFBvc2l0aW9uKSA9PiB7XHJcbiAgICAgIGNvcmUuZHJvcFBvc2l0aW9uID0gZHJvcFBvc2l0aW9uO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIHJldHVybiBkcm9wIHBvc2l0aW9uXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmdldERyb3BQb3N0aW9uID0gKCkgPT4gKGNvcmUuZHJvcFBvc2l0aW9uKTtcclxuXHJcbiAgICAvKiBlc2xpbnQgbm8tY29uc29sZTowICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBmdW5jdGlvbiB0byBnaXZlIGFuIGVycm9yIG1lc3NhZ2VcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIC0gYW55IG1lc3NhZ2UgdG8gYmUgcHJpbnRcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICB0aGlzLmVycm9yID0gY29uc29sZS5lcnJvcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIGxvZyBhIG1lc3NhZ2VcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIC0gYW55IG1lc3NhZ2UgdG8gYmUgcHJpbnRcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICB0aGlzLmxvZyA9IGNvbnNvbGUubG9nO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgY29yZSA9IG5ldyBDb3JlKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb3JlO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJpbXBvcnQgcnBtRXZlbnQgZnJvbSAnLi9ldmVudCc7XHJcblxyXG5jbGFzcyBTdGF0ZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAvLyBhbGwgcHJpdmF0ZSB2YXJpYmFsZSBnb2VzIGhlcmVcclxuICAgIGNvbnN0IHN0YXRlID0ge307XHJcbiAgICBjb25zdCBzaGFyZWFibGVFbGVtZW50UHJvcHMgPSBbJ2lkJywgJ3R5cGUnLCAnbmFtZScsICdwYXlsb2FkJywgJ2Ryb3B6b25lSUQnLCAncGFyZW50SUQnXTtcclxuXHJcbiAgICAvLyBzZXQgYmFzZVxyXG4gICAgc3RhdGUudHJlZSA9IFt7XHJcbiAgICAgIGlkOiAncm9vdCcsXHJcbiAgICAgIGZpZWxkczogW11cclxuICAgIH1dO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogcHJpdmF0ZSBmdW5jdGlvbiB0byB0cmF2ZXJzZSB0aHJvdWdoIGVhY2ggbm9kZSBhbmQgdXBkYXRlIHRoZSBjb3JyZXNwb25kaW5nIG5vZGVcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkcm9wem9uZUlEXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGFyZW50SURcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHVwZGF0ZWRGaWVsZHMgLSBuZXcgZmllbGRzL2VsZW1lbnRzXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBmaWVsZHMgLSBmaWVsZHMvZWxlbWVudHMgb2YgY3VycmVudCBjYW52YXNcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBjb25zdCB0cmF2ZXJzZUFuZFVwZGF0ZVRyZWUgPSAoZHJvcHpvbmVJRCwgcGFyZW50SUQsIHVwZGF0ZWRGaWVsZHMsIGZpZWxkcyA9IHN0YXRlLnRyZWUpID0+IHtcclxuICAgICAgY29uc3QgbWF0Y2hlZFBhcmVudENhbnZhcyA9IGZpZWxkcy5maW5kKGZpZWxkID0+IGZpZWxkLmlkID09PSBwYXJlbnRJRCk7XHJcbiAgICAgIGxldCByZXR1cm5TdGF0dXMgPSBmYWxzZTtcclxuXHJcbiAgICAgIC8vIGZvdW5kIGVsZW1lbnRcclxuICAgICAgaWYgKG1hdGNoZWRQYXJlbnRDYW52YXMpIHtcclxuICAgICAgICBpZiAoZHJvcHpvbmVJRCA9PT0gcGFyZW50SUQpIHtcclxuICAgICAgICAgIC8vIGZpcnN0IHRpbWUsIGNyZWF0ZSBmaWVsZHNcclxuICAgICAgICAgIG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzID0gdXBkYXRlZEZpZWxkcztcclxuICAgICAgICB9IGVsc2UgaWYgKCFtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkcyB8fCAhdXBkYXRlZEZpZWxkcy5sZW5ndGgpIHtcclxuICAgICAgICAgIC8vIHVzZXIgdHJpZWQgdG8gcmVtb3ZlIGVsZW1lbnRzXHJcbiAgICAgICAgICBpZiAoZHJvcHpvbmVJRCAmJiBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkcykge1xyXG4gICAgICAgICAgICBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkcyA9IG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzXHJcbiAgICAgICAgICAgICAgLmZpbHRlcihmID0+IGYuZHJvcHpvbmVJRCAhPT0gZHJvcHpvbmVJRCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBtYXRjaGVkIGNhbnZhcyBkb2VzIG5vdCBoYXMgc3VjaCBmaWVsZCwgY3JlYXRlIG9uZVxyXG4gICAgICAgICAgICBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkcyA9IHVwZGF0ZWRGaWVsZHM7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IGZpZWxkc1RvQmVBZGRlZCA9IFtdO1xyXG5cclxuICAgICAgICAgIC8vIGlmIHVzZXIgd29ya2luZyBvbiBtdWx0aSBkcm9wem9uZSBmaWVsZFxyXG4gICAgICAgICAgY29uc3QgbWF0Y2hlZERyb3B6b25lRmllbGRzID0gbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHNcclxuICAgICAgICAgICAgLmZpbHRlcihmID0+IGYuZHJvcHpvbmVJRCA9PT0gZHJvcHpvbmVJRCk7XHJcblxyXG4gICAgICAgICAgaWYgKG1hdGNoZWREcm9wem9uZUZpZWxkcy5sZW5ndGggIT09IHVwZGF0ZWRGaWVsZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIHNvbWUgb2YgdGhlIGZpZWxkIGdvdCBkZWxldGVkIGZyb20gZHJvcHpvbmVcclxuICAgICAgICAgICAgLy8gcmVwbGFjZSBhbGwgZmllbGRzIHdpdGggbmV3IGZpZWxkc1xyXG4gICAgICAgICAgICBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkcyA9IHVwZGF0ZWRGaWVsZHNcclxuICAgICAgICAgICAgICAuY29uY2F0KG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGYgPT4gZi5kcm9wem9uZUlEICE9PSBkcm9wem9uZUlEKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1cGRhdGVkRmllbGRzLmZvckVhY2goKHVGaWVsZCkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGZpZWxkSW5kZXggPSBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkc1xyXG4gICAgICAgICAgICAgICAgLmZpbmRJbmRleChmID0+IGYuaWQgPT09IHVGaWVsZC5pZCk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIHVzZXIgdHJ5IHRvIGFkZCBuZXcgZmllbGRcclxuICAgICAgICAgICAgICBpZiAoZmllbGRJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkc1RvQmVBZGRlZC5wdXNoKHVGaWVsZCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vIG5ldyBmaWVsZHNcclxuICAgICAgICAgICAgaWYgKCFmaWVsZHNUb0JlQWRkZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgLy8gZWl0aGVyIHVzZXIgaGFzIHVwZGF0ZWQgdGhlIGZpZWxkIG9yIGNoYW5nZWQgdGhlIG9yZGVyXHJcbiAgICAgICAgICAgICAgbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHMgPSBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkc1xyXG4gICAgICAgICAgICAgICAgLm1hcCgoZikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCB1RiA9IHVwZGF0ZWRGaWVsZHMuZmluZCh1ZiA9PiB1Zi5pZCA9PT0gZi5pZCk7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB1RiB8fCBmO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBhZGQgbmV3IGZpZWxkIHRvIGV4aXN0aW5nIGFycmF5XHJcbiAgICAgICAgICBpZiAoZmllbGRzVG9CZUFkZGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkcyA9IG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzLmNvbmNhdChmaWVsZHNUb0JlQWRkZWQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuU3RhdHVzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLyogZXNsaW50IG5vLWVsc2UtcmV0dXJuOiAwICovXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IGNoaWxkRmllbGRzID0gZmllbGRzW2ldLmZpZWxkcztcclxuICAgICAgICAgIGxldCBzdGF0dXMgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAvLyBmaWVsZCBoYXMgc3ViLWZpZWxkcywgY2hlY2sgaW5zaWRlIHN1Yi1maWVsZHNcclxuICAgICAgICAgIGlmIChjaGlsZEZpZWxkcykge1xyXG4gICAgICAgICAgICBzdGF0dXMgPSB0cmF2ZXJzZUFuZFVwZGF0ZVRyZWUoZHJvcHpvbmVJRCwgcGFyZW50SUQsIHVwZGF0ZWRGaWVsZHMsIGNoaWxkRmllbGRzKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJldHVyblN0YXR1cztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBwcml2YXRlIGZ1bmN0aW9uIHRvIHRyYXZlcnNlIHRocm91Z2ggZWFjaCBub2RlIGFuZCByZXR1cm4gdGhlIGZpZWxkIHBhcmVudFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRyb3B6b25lSURcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJlbnRJRFxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gZmllbGRzIC0gZmllbGRzL2VsZW1lbnRzIG9mIGN1cnJlbnQgY2FudmFzXHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFBhcmVudCBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHRyYXZlcnNlQW5kUmV0dXJuUGFyZW50ID0gKGRyb3B6b25lSUQsIHBhcmVudElELCBmaWVsZHMgPSBzdGF0ZS50cmVlKSA9PiB7XHJcbiAgICAgIGNvbnN0IGZvdW5kUGFyZW50ID0gZmllbGRzLmZpbmQoZWxlbWVudCA9PiBlbGVtZW50LmlkID09PSBwYXJlbnRJRCk7XHJcblxyXG4gICAgICBpZiAoIWZvdW5kUGFyZW50KSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBmaWVsZHNbaV07XHJcbiAgICAgICAgICBpZiAoZWxlbWVudC5maWVsZHMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gdHJhdmVyc2VBbmRSZXR1cm5QYXJlbnQoZHJvcHpvbmVJRCwgcGFyZW50SUQsIGVsZW1lbnQuZmllbGRzKTtcclxuICAgICAgICAgICAgaWYgKHN0YXR1cykge1xyXG4gICAgICAgICAgICAgIHJldHVybiBzdGF0dXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBmb3VuZFBhcmVudDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBwcml2YXRlIGZ1bmN0aW9uIHRvIHRyYXZlcnNlIHRocm91Z2ggZWFjaCBub2RlIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVsZW1lbnRJRFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRyb3B6b25lSURcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJlbnRJRFxyXG4gICAgICogQHJldHVybnMge0ZpZWxkL09iamVjdH1cclxuICAgICAqL1xyXG4gICAgY29uc3QgdHJhdmVyc2VBbmRSZXR1cm5FbGVtZW50ID0gKGVsZW1lbnRJRCwgZHJvcHpvbmVJRCwgcGFyZW50SUQpID0+IHtcclxuICAgICAgY29uc3QgZmllbGRQYXJlbnQgPSB0cmF2ZXJzZUFuZFJldHVyblBhcmVudChkcm9wem9uZUlELCBwYXJlbnRJRCk7XHJcbiAgICAgIGlmIChmaWVsZFBhcmVudCkge1xyXG4gICAgICAgIHJldHVybiBmaWVsZFBhcmVudC5maWVsZHMuZmluZChmaWVsZCA9PiBmaWVsZC5pZCA9PT0gZWxlbWVudElEKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogcHJpdmF0ZSBmdW5jdGlvbiB0byByZW1vdmUgdGhlIGZpZWxkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZWxlbWVudElEXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZHJvcHpvbmVJRFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmVudElEXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYlxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHJlbW92ZUVsZW1lbnQgPSAoZWxlbWVudElELCBkcm9wem9uZUlELCBwYXJlbnRJRCwgY2IpID0+IHtcclxuICAgICAgY29uc3QgZWxlbWVudCA9IHRyYXZlcnNlQW5kUmV0dXJuRWxlbWVudChlbGVtZW50SUQsIGRyb3B6b25lSUQsIHBhcmVudElEKTtcclxuXHJcbiAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFbGVtZW50KGVsZW1lbnRJRCwgY2IpO1xyXG4gICAgICAgIHJwbUV2ZW50Lm5vdGlmeUVsZW1lbnRSZW1vdmUoe1xyXG4gICAgICAgICAgZWxlbWVudElELCBkcm9wem9uZUlELCBwYXJlbnRJRCwgdHJhc2hlZDogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIGZpbHRlciBvdXQgc2Vuc2l0aXZlIGluZm9ybWF0aW9uIGZyb20gZWxlbWVudFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb25seVJlbW92ZUZ1bmN0aW9ucyAtIGluLWNhc2Ugb2YgYGdldFN0b3JhYmxlU3RhdGVgIHJlc3VsdCB3ZSBvbmx5XHJcbiAgICAgKiBuZWVkIHRvIGZpbHRlciBvdXQgZnVuY3Rpb25zIGFuZCBpbiBvdGhlciBjYXNlcyB3ZSB3aWxsIGZpbHRlciBvdXQgb3RoZXIgcHJvcHMgYWxzb1xyXG4gICAgICogYmFzZWQgb24gYHNoYXJlYWJsZUVsZW1lbnRQcm9wc2BcclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBjb25zdCByZW1vdmVTZW5zaXRpdmVQcm9wcyA9IChlbGVtZW50LCBvbmx5UmVtb3ZlRnVuY3Rpb25zKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNoYXJlYWJsZUVsZW1lbnQgPSB7fTtcclxuXHJcbiAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyByZW1vdmUgYWxsIHByaXZhdGUvZnVuY3RpbmFsIHByb3BlcnRpZXNcclxuICAgICAgT2JqZWN0LmtleXMoZWxlbWVudCkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgdHlwZW9mIGVsZW1lbnRba2V5XSAhPT0gJ2Z1bmN0aW9uJyAmJlxyXG4gICAgICAgICAgKFxyXG4gICAgICAgICAgICBvbmx5UmVtb3ZlRnVuY3Rpb25zIHx8XHJcbiAgICAgICAgICAgICFvbmx5UmVtb3ZlRnVuY3Rpb25zICYmIHNoYXJlYWJsZUVsZW1lbnRQcm9wcy5pbmRleE9mKGtleSkgIT09IC0xXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBzaGFyZWFibGVFbGVtZW50W2tleV0gPSBlbGVtZW50W2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiBzaGFyZWFibGVFbGVtZW50O1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBmdW5jdGlvbiB0byByZXR1cm4gZWxlbWVudCwgZmlsdGVyIHNlbnNpdGl2ZSBwcm9wcyBiZWZvcmUgcmV0dXJuXHJcbiAgICBjb25zdCBnZXRFbGVtZW50ID0gKC4uLmFyZ3MpID0+IHJlbW92ZVNlbnNpdGl2ZVByb3BzKHRyYXZlcnNlQW5kUmV0dXJuRWxlbWVudCguLi5hcmdzKSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBwcml2YXRlIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgZXhpc2l0aW5nIGZpZWxkXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZWxlbWVudElEXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZHJvcHpvbmVJRFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmVudElEXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnQvT2JqZWN0fSBuZXdEYXRhIC0geyBpZCwgdHlwZSwgbmFtZSwgcGF5bG9hZCB9XHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYlxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZUVsZW1lbnQgPSAoZWxlbWVudElELCBkcm9wem9uZUlELCBwYXJlbnRJRCwgbmV3RGF0YSwgY2IpID0+IHtcclxuICAgICAgY29uc3QgZWxlbWVudCA9IHRyYXZlcnNlQW5kUmV0dXJuRWxlbWVudChlbGVtZW50SUQsIGRyb3B6b25lSUQsIHBhcmVudElEKTtcclxuXHJcbiAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC51cGRhdGVFbGVtZW50KHtcclxuICAgICAgICAgIC4uLm5ld0RhdGEsXHJcbiAgICAgICAgICBpZDogZWxlbWVudElEXHJcbiAgICAgICAgfSwgY2IpO1xyXG5cclxuICAgICAgICBycG1FdmVudC5ub3RpZnlFbGVtZW50VXBkYXRlKGdldEVsZW1lbnQoZWxlbWVudElELCBkcm9wem9uZUlELCBwYXJlbnRJRCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBmdW5jdGlvbiB0byB0cmF2ZXJzZSB0aHJvdWdoIGFsbCBub2RlXHJcbiAgICAvLyByZW1vdmUgYWxsIHByaXZhdGUvZnVuY3Rpb25hbCBwcm9wZXJ0aWVzXHJcbiAgICAvLyBhbmQgcmV0dXJuIGZsYXQgb2JqZWN0IGZvciBlYWNoIG5vZGVcclxuICAgIGNvbnN0IHRyYXZlcnNlQW5kVGFrZVNuYXBzaG90ID0gKGVsZW1lbnQpID0+IHtcclxuICAgICAgY29uc3Qgc3ViRmllbGRzID0gW107XHJcbiAgICAgIC8vIHJlbW92ZSBhbGwgZnVuY3RpbmFsIHByb3BlcnRpZXNcclxuICAgICAgY29uc3QgbmVjZXNzYXJ5RGV0YWlscyA9IHJlbW92ZVNlbnNpdGl2ZVByb3BzKGVsZW1lbnQsIHRydWUpO1xyXG5cclxuICAgICAgLy8gY2hlY2sgZm9yIHN1YiBmaWVsZHMgYW5kIHBlcmZvcm0gc2FtZSBvcGVyYXRpb25zIHJlY3Vyc2l2ZWx5XHJcbiAgICAgIGlmIChlbGVtZW50LmZpZWxkcyAmJiBlbGVtZW50LmZpZWxkcy5sZW5ndGgpIHtcclxuICAgICAgICBlbGVtZW50LmZpZWxkcy5mb3JFYWNoKChmKSA9PiB7XHJcbiAgICAgICAgICBzdWJGaWVsZHMucHVzaCh0cmF2ZXJzZUFuZFRha2VTbmFwc2hvdChmKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGlmIGFwcGVuZCBpbml0aWFsRWxlbWVudHMgYW5kIHVwZGF0ZWQgZmllbGRzXHJcbiAgICAgIGlmIChzdWJGaWVsZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgbmVjZXNzYXJ5RGV0YWlscy5pbml0aWFsRWxlbWVudHMgPSBbXTtcclxuICAgICAgICBuZWNlc3NhcnlEZXRhaWxzLmZpZWxkcyA9IFtdO1xyXG5cclxuICAgICAgICBzdWJGaWVsZHMuZm9yRWFjaCgoc2YpID0+IHtcclxuICAgICAgICAgIG5lY2Vzc2FyeURldGFpbHMuaW5pdGlhbEVsZW1lbnRzLnB1c2goc2YpO1xyXG4gICAgICAgICAgbmVjZXNzYXJ5RGV0YWlscy5maWVsZHMucHVzaChzZik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHJldHVybiBmbGF0IG9iamVjdCB3aGljaCByZXByZXNlbnQgY3VycmVudCBub2RlIGluIHRyZWVcclxuICAgICAgcmV0dXJuIG5lY2Vzc2FyeURldGFpbHM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgc3RhdGVcclxuICAgIC8vIG9uY2UgdXBkYXRlIGlzIGRvbmUgdGhlbiB0cmlnZ2VycyBDQiBhbmQgbm90aWZ5U3RhdGVDaGFuZ2VcclxuICAgIHRoaXMudXBkYXRlU3RhdGUgPSAoZHJvcHpvbmVJRCwgcGFyZW50SUQsIGZpZWxkcywgY2IgPSAoKSA9PiB7fSwgZGlzcGF0Y2hFbGVtZW50UmVtb3ZlKSA9PiB7XHJcbiAgICAgIHRyYXZlcnNlQW5kVXBkYXRlVHJlZShkcm9wem9uZUlELCBwYXJlbnRJRCwgZmllbGRzKTtcclxuICAgICAgY2Ioc3RhdGUudHJlZSk7XHJcbiAgICAgIHJwbUV2ZW50Lm5vdGlmeVN0YXRlQ2hhbmdlKCk7XHJcblxyXG4gICAgICAvLyBkaXNwYXRjaCBlbGVtZW50UmVtb3ZlIGV2ZW50IGlmIG5lY2Vzc2FyeVxyXG4gICAgICBpZiAoZGlzcGF0Y2hFbGVtZW50UmVtb3ZlKSB7XHJcbiAgICAgICAgcnBtRXZlbnQubm90aWZ5RWxlbWVudFJlbW92ZSh7XHJcbiAgICAgICAgICBkcm9wem9uZUlELFxyXG4gICAgICAgICAgcGFyZW50SUQsXHJcbiAgICAgICAgICBkaXNwYXRjaEVsZW1lbnRSZW1vdmUsXHJcbiAgICAgICAgICAvLyBqdXN0IHRvIGRpc3Rpbmd1aXNoIHdoZXRoZXIgZmllbGQgcmVtb3ZlZCBmcm9tIGByZW1vdmVGaWVsZGAgQVBJIG9yIHRyYXNoIGNvbXBvbmVudFxyXG4gICAgICAgICAgdHJhc2hlZDogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGZ1bmN0aW9uIHRvIHJldHVybiBlbGVtZW50IHBhcmVudFxyXG4gICAgdGhpcy5nZXRFbGVtZW50UGFyZW50ID0gdHJhdmVyc2VBbmRSZXR1cm5QYXJlbnQ7XHJcblxyXG4gICAgLy8gZnVuY3Rpb24gdG8gcmV0dXJuIGVsZW1lbnRcclxuICAgIHRoaXMuZ2V0RWxlbWVudCA9IGdldEVsZW1lbnQ7XHJcblxyXG4gICAgLy8gZnVuY3Rpb24gdG8gcmVtb3ZlIGVsZW1lbnRcclxuICAgIHRoaXMucmVtb3ZlRWxlbWVudCA9IHJlbW92ZUVsZW1lbnQ7XHJcblxyXG4gICAgLy8gZnVuY3Rpb24gdG8gdXBkYXRlIGVsZW1lbnRcclxuICAgIHRoaXMudXBkYXRlRWxlbWVudCA9IHVwZGF0ZUVsZW1lbnQ7XHJcblxyXG4gICAgLy8gZnVudGlvbiB0byBnZXQgZWxlbWVudCBkZXRhaWxzXHJcbiAgICB0aGlzLnRyYXZlcnNlQW5kUmV0dXJuRWxlbWVudCA9IHRyYXZlcnNlQW5kUmV0dXJuRWxlbWVudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIHJldHVybiBjdXJyZW50IHN0YXRlIG9mIHRyZWUgKGFzIGlzKVxyXG4gICAgICoga2VlcGluZyB0aGlzIGZ1bmN0aW9uIHRvIGdpdmUgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IC0gc3RhdGUgdHJlZVxyXG4gICAgICovXHJcbiAgICB0aGlzLmdldFN0YXRlID0gKCkgPT4gKHN0YXRlLnRyZWUpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZnVuY3Rpb24gdG8gcmV0dXJuIHN0b3JhYmxlIGN1cnJlbnQgc3RhdGVcclxuICAgICAqIHRoaXMgZnVuY3Rpb24gZG9lcyBzYW1lIGpvYiBhcyBnZXRTdGF0ZSBvbmx5IGl0IG1ha2Ugc3VyZVxyXG4gICAgICogcmV0dXJuZWQgZGF0YSBpcyBpbiBwcm9wZXIgZm9ybWF0IGFuZCB1bmVjZXNzYXJ5IHByb3BlcnRpZXMgcmVtb3ZlZFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IC0gc3RhdGUgdHJlZVxyXG4gICAgICovXHJcbiAgICB0aGlzLmdldFN0b3JhYmxlU3RhdGUgPSAoKSA9PiAoc3RhdGUudHJlZVswXS5maWVsZHNcclxuICAgICAgLm1hcChmID0+IHRyYXZlcnNlQW5kVGFrZVNuYXBzaG90KGYpKSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBmdW5jdGlvbiB0byBjbGVhciB0aGUgc3RhdGVcclxuICAgICAqIGxvb3AgdGhvdWdoIGFsbCBwYXJlbnQoZW5kIGxldmVsKSBub2RlcywgYW5kIGNhbGwgYGZsdXNoRHJvcHBlZEVsZW1lbnRzYCBmdW5jdGlvblxyXG4gICAgICogc28gdGhhdCBjb21wb25lbnQgYXMgd2VsbCBhcyBhcHBsaWNhdGlvbiBzdGF0ZSBnZXRzIGZsdXNoZWRcclxuICAgICAqL1xyXG4gICAgdGhpcy5jbGVhclN0YXRlID0gKGNiID0gKCkgPT4ge30pID0+IHtcclxuICAgICAgY29uc3Qgcm9vdE5vZGUgPSBzdGF0ZS50cmVlWzBdO1xyXG4gICAgICBjb25zdCB0b3BMZXZlbEZpZWxkcyA9IHJvb3ROb2RlLmZpZWxkcy5sZW5ndGg7XHJcblxyXG4gICAgICAvLyBjYW52YXMgaXMgZW1wdHksIGp1c3Qgbm90aWZ5IG90aGVyXHJcbiAgICAgIGlmICghcm9vdE5vZGUuZmllbGRzLmxlbmd0aCkge1xyXG4gICAgICAgIHJwbUV2ZW50Lm5vdGlmeVN0YXRlRmx1c2goKTtcclxuICAgICAgICBjYigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByb290Tm9kZS5maWVsZHMuZm9yRWFjaCgodG9wTGV2ZWxFbGVtZW50LCBpKSA9PiB7XHJcbiAgICAgICAgdG9wTGV2ZWxFbGVtZW50LmZsdXNoRHJvcHBlZEVsZW1lbnRzKCgpID0+IHtcclxuICAgICAgICAgIGlmIChpID09PSB0b3BMZXZlbEZpZWxkcyAtIDEpIHtcclxuICAgICAgICAgICAgcnBtRXZlbnQubm90aWZ5U3RhdGVGbHVzaCh0cnVlKTtcclxuICAgICAgICAgICAgY2IoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBmdW5jdGlvbiB0byBhZGQgZXZlbnRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIC0gY2FsbGJhY2tcclxuICAgICAqL1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gcnBtRXZlbnQuYWRkRXZlbnRMaXN0ZW5lcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIHJlbW92ZSBldmVudFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgLSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBycG1FdmVudC5yZW1vdmVFdmVudExpc3RlbmVyO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3Qgc3RhdGUgPSBuZXcgU3RhdGUoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0YXRlO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuaW1wb3J0IHN0YXRlIGZyb20gJy4uLy4uL2NvcmUvc3RhdGUnO1xyXG5pbXBvcnQgY29yZSBmcm9tICcuLi8uLi9jb3JlL2NvcmUnO1xyXG5cclxuY2xhc3MgRHJvcHpvbmUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgLy8gY3JlYXRlIHJlZnJlbmNlIGZvciBjYW52YXNcclxuICAgIC8vIHRvIGNoZWNrIHdoZXRoZXIgaXMgZHJhZ2dpbmcgb24gY3VycmVudCBjYW52YXMgb3Igbm90XHJcbiAgICB0aGlzLmNhbnZhc1JlZiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xyXG5cclxuICAgIC8vIGNvbXBvbmVudCBzdGF0ZVxyXG4gICAgLy8gaW5pdGlhbEVsZW1lbnRzIC0gdG8ga2VlcCB0cmFjayBvZiBpbml0aWFsIGVsZW1lbnRzXHJcbiAgICAvLyBkcm9wcGVkRWxlbWVudHMgLSB0byBrZWVwIHRyYWNrIG9mIG5ld2x5IGFkZGVkIGVsZW1lbnRzXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBpbml0aWFsRWxlbWVudHM6IFtdLFxyXG4gICAgICBkcm9wcGVkRWxlbWVudHM6IFtdLFxyXG4gICAgICBpbml0RG9uZTogZmFsc2VcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICB0aGlzLl9zZXRJbml0aWFsRWxlbWVudHModGhpcy5wcm9wcy5pbml0aWFsRWxlbWVudHMpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyh7IGluaXRpYWxFbGVtZW50cyB9KSB7XHJcbiAgICB0aGlzLl9zZXRJbml0aWFsRWxlbWVudHMoaW5pdGlhbEVsZW1lbnRzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIGFsbG93IG1hbnVhbCBlbGVtZW50IHVwZGF0ZVxyXG4gICAqIE5vdGUgLSBmdW5jdGlvbiBpcyBvbmx5IGFjY2Vzc2libGUgdGhyb3VnaCByZWYgYW5kIG1ha2Ugc3VyZVxyXG4gICAqIHZhbGlkIGRhdGEgaXMgcGFzcyB0aHJvdWdoIGVsc2UgYXBwbGljYXRpb24gc3RhdGUvaGllcmFyY2h5IGNhbiBicmVha1xyXG4gICAqIEBwYXJhbSBkYXRhIHtBcnJheS9GdW5jdGlvbn0gLSBpZiBpdHMgZnVuY3Rpb24gdGhlbiBtYWtlIHN1cmUgeW91IGFyZVxyXG4gICAqIHJldHVybmluZyB2YWxpZGEgYXJyYXlcclxuICAgKiBAcGFyYW0gZG9uZSB7ZnVuY3Rpb259IC0gc3VjY2VzcyBjYWxsIGJhY2sgZnVuY3Rpb25cclxuICAgKi9cclxuICBkYW5nZXJvdXNseVNldEVsZW1lbnRzID0gKGRhdGEsIGRvbmUpID0+IHtcclxuICAgIGxldCBlbGVtZW50cyA9IFtdO1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGVsZW1lbnRzID0gZGF0YSh0aGlzLnN0YXRlLmRyb3BwZWRFbGVtZW50cykgfHwgW107XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlbGVtZW50cyA9IGRhdGE7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGlkOiBkcm9wem9uZUlELCBwYXJlbnRJRCB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBlbGVtZW50cyA9IGVsZW1lbnRzLm1hcChlID0+ICh7XHJcbiAgICAgIC4uLmUsXHJcbiAgICAgIGRyb3B6b25lSUQsXHJcbiAgICAgIHBhcmVudElELFxyXG4gICAgICBzaG93QmFzaWNDb250ZW50OiBmYWxzZSxcclxuICAgICAgdXBkYXRlU3RhdGU6IHRoaXMuX3VwZGF0ZVN0YXRlLFxyXG4gICAgICByZW1vdmVFbGVtZW50OiB0aGlzLl9yZW1vdmVFbGVtZW50LFxyXG4gICAgICB1cGRhdGVFbGVtZW50OiB0aGlzLl91cGRhdGVFbGVtZW50LFxyXG4gICAgICBmbHVzaERyb3BwZWRFbGVtZW50czogdGhpcy5fZmx1c2hEcm9wcGVkRWxlbWVudHMsXHJcbiAgICAgIGNoZWNrQW5kUmVtb3ZlRWxlbWVudDogdGhpcy5fY2hlY2tBbmRSZW1vdmVFbGVtZW50XHJcbiAgICB9KSk7XHJcblxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGluaXRpYWxFbGVtZW50czogZWxlbWVudHMsXHJcbiAgICAgIGRyb3BwZWRFbGVtZW50czogZWxlbWVudHNcclxuICAgIH0sICgpID0+IHRoaXMuX3VwZGF0ZVN0YXRlKGRvbmUpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIHJlbW92ZSBiZWZvcmUvYWZ0ZXIgY2xhc3MgZm9ybSBhbGwgY2FudmFzIGVsZW1lbnRzXHJcbiAgICovXHJcbiAgX3VubWFya0RyYWdFbGVtZW50cyA9ICgpID0+IHtcclxuICAgIFtdLmZvckVhY2guY2FsbCh0aGlzLmNhbnZhc1JlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kcmFnLWl0ZW0nKSwgZSA9PiBlLmNsYXNzTGlzdC5yZW1vdmUoJ2JlZm9yZScsICdhZnRlcicpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIHNldCBpbml0aWFsIGVsZW1lbnRzXHJcbiAgICogQHBhcmFtIGluaXRpYWxFbGVtZW50cyB7QXJyYXl9IC0gSXQgaG9sZHMgYWxsIGluaXRpYWwgZWxlbWVudHMgdG8gYmUgc2hvd24gaW4gY2FudmFzXHJcbiAgICovXHJcbiAgX3NldEluaXRpYWxFbGVtZW50cyA9IChpbml0aWFsRWxlbWVudHMpID0+IHtcclxuICAgIC8vIGN1cnJlbnQgY29tcG9uZW50IHN0YXRlKGRyb3BwZWRFbGVtZW50cykgZG9lc24ndCBob2xkIGFueSBlbGVtZW50c1xyXG4gICAgLy8gYnV0IGluaXRpYWxFbGVtZW50cyBoYXMgc29tZSBlbGVtZW50IHRvIGJlIHNldFxyXG4gICAgY29uc3QgZ290SW5pdGlhbEl0ZW1zID0gQXJyYXkuaXNBcnJheShpbml0aWFsRWxlbWVudHMpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRWxlbWVudHMubGVuZ3RoICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5zdGF0ZS5pbml0RG9uZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuc3RhdGUuaW5pdGlhbEVsZW1lbnRzLmxlbmd0aDtcclxuXHJcbiAgICAvLyBmb3IgZmlyc3QgdGltZSBhZGQgaW5pdGlhbEVsZW1lbnRzIHRvIGRyb3BwZWRFbGVtZW50c1xyXG4gICAgaWYgKGdvdEluaXRpYWxJdGVtcykge1xyXG4gICAgICBjb25zdCB7IGlkOiBkcm9wem9uZUlELCBwYXJlbnRJRCB9ID0gdGhpcy5wcm9wcztcclxuICAgICAgY29uc3QgdXBkYXRlZEluaXRpYWxJdGVtcyA9IGluaXRpYWxFbGVtZW50cy5tYXAoZSA9PiAoe1xyXG4gICAgICAgIC4uLmUsXHJcbiAgICAgICAga2V5OiBlLmlkLFxyXG4gICAgICAgIGRyb3B6b25lSUQsXHJcbiAgICAgICAgcGFyZW50SUQsXHJcbiAgICAgICAgc2hvd0Jhc2ljQ29udGVudDogZmFsc2UsXHJcbiAgICAgICAgdXBkYXRlU3RhdGU6IHRoaXMuX3VwZGF0ZVN0YXRlLFxyXG4gICAgICAgIHJlbW92ZUVsZW1lbnQ6IHRoaXMuX3JlbW92ZUVsZW1lbnQsXHJcbiAgICAgICAgdXBkYXRlRWxlbWVudDogdGhpcy5fdXBkYXRlRWxlbWVudCxcclxuICAgICAgICBmbHVzaERyb3BwZWRFbGVtZW50czogdGhpcy5fZmx1c2hEcm9wcGVkRWxlbWVudHMsXHJcbiAgICAgICAgY2hlY2tBbmRSZW1vdmVFbGVtZW50OiB0aGlzLl9jaGVja0FuZFJlbW92ZUVsZW1lbnRcclxuICAgICAgfSkpO1xyXG5cclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaW5pdGlhbEVsZW1lbnRzOiB1cGRhdGVkSW5pdGlhbEl0ZW1zLFxyXG4gICAgICAgIGRyb3BwZWRFbGVtZW50czogdXBkYXRlZEluaXRpYWxJdGVtc1xyXG4gICAgICB9LCAoKSA9PiAodGhpcy5fdXBkYXRlU3RhdGUoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgaW5pdERvbmU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgfSkpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIHRvZ2dsZS9tYW5hZ2UgY2xhc3MoaW5zaWRlKVxyXG4gICAqIGNsYXNzIGdldHMgYXBwZW5kZWQgdG8gY2FudmFzXHJcbiAgICogQHBhcmFtIHRhcmdldCB7RE9NfSAtIGN1cnJlbnQgY2FudmFzIHVwb24gd2hpY2ggdXNlIGlzIGhvdmVyaW5nXHJcbiAgICogQHBhcmFtIGFjdGlvbiB7U3RyaW5nfSAtIGFkZC9yZW1vdmUgLSBuYW1lIG9mIGFjdGlvblxyXG4gICAqL1xyXG4gIF9tYW5hZ2VJbnNpZGVDbGFzcyA9ICh7IHRhcmdldCB9LCBhY3Rpb24pID0+IHtcclxuICAgIGlmICh0aGlzLmNhbnZhc1JlZi5jdXJyZW50ID09PSB0YXJnZXQpIHtcclxuICAgICAgdGFyZ2V0LmNsYXNzTGlzdFthY3Rpb25dKCdpbnNpZGUnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIHJlbW92ZSBlbGVtZW50IGZyb20gZHJvcHBlZEVsZW1lbnRzXHJcbiAgICogQHBhcmFtIGVsZW1lbnRJRCAtIHtTdHJpbmd9IC0gSUQgb2YgZWxlbWVudFxyXG4gICAqIEBwYXJhbSBjYiAtIHtmdW5jdGlvbn1cclxuICAgKiBAcGFyYW0gZGlzcGF0Y2hFbGVtZW50UmVtb3ZlIHtCb29sZWFufSAtIHRyaWdnZXIgYHJlbW92ZUVsZW1lbnRgIGV2ZW50IGlmIGl0cyB0cnVlXHJcbiAgICovXHJcbiAgX3JlbW92ZUVsZW1lbnQgPSAoZWxlbWVudElELCBjYiA9ICgpID0+IHt9LCBkaXNwYXRjaEVsZW1lbnRSZW1vdmUpID0+IHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zdGF0ZS5kcm9wcGVkRWxlbWVudHMuZmluZEluZGV4KGUgPT4gZS5pZCA9PT0gZWxlbWVudElEKTtcclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgZHJvcHBlZEVsZW1lbnRzOiB0aGlzLnN0YXRlLmRyb3BwZWRFbGVtZW50cy5maWx0ZXIoKGQsIGkpID0+IChpICE9PSBpbmRleCkpXHJcbiAgICB9LCAoKSA9PiB0aGlzLl91cGRhdGVTdGF0ZShjYiwgZGlzcGF0Y2hFbGVtZW50UmVtb3ZlID8gZWxlbWVudElEIDogbnVsbCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZnVuY3Rpb24gdG8gdXBkYXRlIGVsZW1lbnQgZnJvbSBkcm9wcGVkRWxlbWVudHNcclxuICAgKiBAcGFyYW0gbmV3RGF0YSAtIHtlbGVtZW50fSAtIHsgaWQsIG5hbWUsIHR5cGUsIHBheWxvYWQgfVxyXG4gICAqIEBwYXJhbSBjYiAtIHtmdW5jdGlvbn1cclxuICAgKi9cclxuICBfdXBkYXRlRWxlbWVudCA9IChuZXdEYXRhLCBjYiA9ICgpID0+IHt9KSA9PiB7XHJcbiAgICBjb25zdCBlbGVtZW50SW5kZXggPSB0aGlzLnN0YXRlLmRyb3BwZWRFbGVtZW50cy5maW5kSW5kZXgoZSA9PiBlLmlkID09PSBuZXdEYXRhLmlkKTtcclxuXHJcbiAgICBpZiAoZWxlbWVudEluZGV4ID09PSAtMSkge1xyXG4gICAgICByZXR1cm4gY2IobnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc3VwcG9ydCBpcyBsaW1pdGVkIHRvIGJlbG93IGtleXMgb25seSwgdG8gYXZvaWQgcG9zc2libGUgYnJlYWtzXHJcbiAgICBjb25zdCBzdXBwb3J0ZWRLZXlzID0gWyduYW1lJywgJ3R5cGUnLCAncGF5bG9hZCddO1xyXG4gICAgY29uc3QgbmV3RWxlbWVudERhdGEgPSB7fTtcclxuICAgIE9iamVjdC5rZXlzKG5ld0RhdGEpXHJcbiAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICBpZiAoc3VwcG9ydGVkS2V5cy5pbmRleE9mKGtleSkgIT09IC0xKSB7XHJcbiAgICAgICAgICBuZXdFbGVtZW50RGF0YVtrZXldID0gbmV3RGF0YVtrZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGRyb3BwZWRFbGVtZW50czogdGhpcy5zdGF0ZS5kcm9wcGVkRWxlbWVudHNcclxuICAgICAgICAubWFwKChlKSA9PiB7XHJcbiAgICAgICAgICBpZiAoZS5pZCA9PT0gbmV3RGF0YS5pZCkge1xyXG4gICAgICAgICAgICByZXR1cm4geyAuLi5lLCAuLi5uZXdFbGVtZW50RGF0YSB9O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgIH0pXHJcbiAgICB9LCAoKSA9PiB0aGlzLl91cGRhdGVTdGF0ZShjYikpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZnVuY3Rpb24gdG8gdXBkYXRlIHRoZSBhcHBsaWNhdGlvbiBzdGF0ZSAobm90IGNvbXBvbmVudCBzdGF0ZSlcclxuICAgKiBmdW5jdGlvbiB3aWxsIGZ1cnRoZXIgY2FsbCBgdXBkYXRlU3RhdGVgIGZyb20gc3RhdGUgQVBJLCB3aGljaCB1cGRhdGVzIHRoZSBhcHBsaWNhdGlvbiBzdGF0ZVxyXG4gICAqIEBwYXJhbSBjYiB7ZnVuY3Rpb259IC0gY2FsbGJhY2sgZnVuY3Rpb24gLSBvcHRpb25hbFxyXG4gICAqL1xyXG4gIF91cGRhdGVTdGF0ZSA9IChjYiA9ICgpID0+IHt9LCBkaXNwYXRjaEVsZW1lbnRSZW1vdmUpID0+IHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgaWQ6IGRyb3B6b25lSUQsXHJcbiAgICAgIHBhcmVudElEXHJcbiAgICB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBzdGF0ZS51cGRhdGVTdGF0ZShcclxuICAgICAgZHJvcHpvbmVJRCxcclxuICAgICAgcGFyZW50SUQsXHJcbiAgICAgIHRoaXMuc3RhdGUuZHJvcHBlZEVsZW1lbnRzLFxyXG4gICAgICBjYixcclxuICAgICAgZGlzcGF0Y2hFbGVtZW50UmVtb3ZlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZnVuY3Rpb24gdG8gZmx1c2ggdGhlIGNvbXBvbmVudCBzdGF0ZVxyXG4gICAqIG9uY2UgY29tcG9uZW50IHN0YXRlIHRocyBmbHVzaGVkLCB0aGlzIHdpbGwgY2FsbCBgX3VwZGF0ZVN0YXRlYCB0byB1cGRhdGUgdGhlXHJcbiAgICogYXBwbGljYXRpb24gc3RhdGVcclxuICAgKiBAcGFyYW0gY2Ige2Z1bmN0aW9ufSAtIGNhbGxiYWNrIGZ1bmN0aW9uIC0gb3B0aW9uYWxcclxuICAgKi9cclxuICBfZmx1c2hEcm9wcGVkRWxlbWVudHMgPSAoY2IgPSAoKSA9PiB7fSkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGluaXRpYWxFbGVtZW50czogW10sXHJcbiAgICAgIGRyb3BwZWRFbGVtZW50czogW11cclxuICAgIH0sICgpID0+ICh0aGlzLl91cGRhdGVTdGF0ZShjYikpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIGNoZWNrIGJlbG93IHBhcmFtZXRlcnNcclxuICAgKiAxIC0gdXNlcidzIGludGVuZCBpcyB0byBtb3ZlIGVsZW1lbnQgZnJvbSBvbmUgY2FudmFzIHRvIG90aGVyXHJcbiAgICogMiAtIEdldCBjb25maXJtYXRpb24gYmVmb3JlIHJlbW92ZVxyXG4gICAqIG9uY2UgYm90aCBjb25kaXRpb24gbWF0Y2hlZCByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSBjdXJyZW50IGNhbnZhc1xyXG4gICAqL1xyXG4gIF9jaGVja0FuZFJlbW92ZUVsZW1lbnQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBlbGVtZW50TW92ZWQgPSBjb3JlLmdldERyYWdnZWRFbGVtZW50KCk7XHJcbiAgICBjb25zdCB7IHJlbW92ZUVsZW1lbnQsIGVsZW1lbnRJRCB9ID0gZWxlbWVudE1vdmVkO1xyXG4gICAgY29uc3Qgc3RhdHVzID0gdGhpcy5wcm9wcy5vbkVsZW1lbnRNb3ZlKGVsZW1lbnRNb3ZlZCk7XHJcbiAgICBjb25zdCBhdHRlbXB0VG9Nb3ZlID0gIWNvcmUuZ2V0QXR0ZW1wdFRvUmVtb3ZlKCk7XHJcblxyXG4gICAgaWYgKHN0YXR1cyAmJiBhdHRlbXB0VG9Nb3ZlKSB7XHJcbiAgICAgIHJlbW92ZUVsZW1lbnQoZWxlbWVudElEKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHVzZXIgaXMgZHJhZ2dpbmcgb3ZlciB0aGUgY2FudmFzXHJcbiAgLy8gYHByZXZlbnREZWZhdWx0YCAtIFJlcXVpcmVkLiBBbGxvd3MgdXMgdG8gZHJvcC5cclxuICAvLyBAcGFyYW0gZSB7ZXZlbnR9XHJcbiAgX29uRHJhZ092ZXIgPSAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHVzZXIgaXMgbGVhdmluZyB0aGUgY2FudmFzXHJcbiAgICogQHBhcmFtIGUge2V2ZW50fVxyXG4gICAqL1xyXG4gIF9vbkRyYWdMZWF2ZSA9IChlKSA9PiB7XHJcbiAgICB0aGlzLl9tYW5hZ2VJbnNpZGVDbGFzcyhlLCAncmVtb3ZlJyk7XHJcbiAgICBjb3JlLnNldEF0dGVtcHRUb1JlbW92ZSh0cnVlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHVzZXIgaXMgZHJhZ2dpbmcgb3ZlciBjYW52YXNcclxuICAgKiBAcGFyYW0gZSB7ZXZlbnR9XHJcbiAgICovXHJcbiAgX29uRHJhZ0VudGVyID0gKGUpID0+IHtcclxuICAgIHRoaXMuX21hbmFnZUluc2lkZUNsYXNzKGUsICdhZGQnKTtcclxuICAgIGNvcmUuc2V0QXR0ZW1wdFRvUmVtb3ZlKGZhbHNlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHVzZSBoYXMgZHJvcHBlZCB0aGUgZWxlbWVudCBpbnRvIHRoZSBjYW52YXNcclxuICAgKiBwZXJmb3JtIGFsbCByZXF1aXJlZCBjaGVja3NcclxuICAgKiBmdW5jdGlvbiBhbHNvIHRyaWdnZXJzIGBvbkRyb3BgIHByb3Agc28gdGhhdCB1c2V0IGNhbiBwcm92aWRlIGFkZGl0aW9uYWwgaW5mb1xyXG4gICAqIG9uY2UgYWxsIGRvbmUgYF9hZGRFbGVtZW50YCBnZXQgY2FsbGVkIHdpdGggYWxsIHJlcXVpcmVkIGluZm9cclxuICAgKiBAcGFyYW0gZSB7ZXZlbnR9XHJcbiAgICovXHJcbiAgX29uRHJvcCA9IChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgY29uc3QgeyBkcm9wcGVkRWxlbWVudHMgfSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgY29yZS5zZXRBdHRlbXB0VG9SZW1vdmUoZmFsc2UpO1xyXG4gICAgdGhpcy5fbWFuYWdlSW5zaWRlQ2xhc3MoZSwgJ3JlbW92ZScpO1xyXG5cclxuICAgIGNvbnN0IHsgb25Ecm9wIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKGUuZGF0YVRyYW5zZmVyLmdldERhdGEoJ2RhdGEnKSk7XHJcbiAgICBkYXRhID0geyAuLi5kYXRhIH07XHJcblxyXG4gICAgdGhpcy5fdW5tYXJrRHJhZ0VsZW1lbnRzKCk7XHJcblxyXG4gICAgcmV0dXJuIG9uRHJvcCA/IG9uRHJvcChkYXRhLCB0aGlzLl9hZGRFbGVtZW50LCB7XHJcbiAgICAgIGRyb3BJbmRleDogIWRyb3BwZWRFbGVtZW50cy5sZW5ndGggPyBjb3JlLmdldERyb3BQb3N0aW9uKCkgKyAxIDogMCxcclxuICAgICAgY3VycmVudEVsZW1lbnRzOiBkcm9wcGVkRWxlbWVudHNcclxuICAgIH0pIDogdGhpcy5fYWRkRWxlbWVudChkYXRhKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIGFkZCBlbGVtZW50IGludG8gZHJvcHBlZEVsZW1lbnRzXHJcbiAgICogcHJpb3IgdG8gYWRkIGl0IHBlcmZvbSBiZWxvdyBjaGVja1xyXG4gICAqIDEgLSBlbGVtZW50IGhhcyB1bmlxdWUga2V5XHJcbiAgICogMiAtIGVsZW1lbnQgaGFzIGludmFsaWQgZGF0YVxyXG4gICAqIDMgLSBjaGVjayBhZ2FpbnN0IG1heC1jYXBhY2l0eVxyXG4gICAqIG9uY2UgZWxlbWVudCBhZGRlZCByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSBwcmV2aW91cyBjYW52YXNcclxuICAgKiBAcGFyYW0gdXBkYXRlZERhdGEge09iamVjdH0gLSBlbGVtZW50IGluZm9ybWF0aW9uXHJcbiAgICogQHJldHVybnMgT2JqZWN0IC0gbmV3IGxpc3Qgb2YgY2FudmFzIGVsZW1lbnRzXHJcbiAgICovXHJcbiAgX2FkZEVsZW1lbnQgPSAodXBkYXRlZERhdGEpID0+IHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgaWQ6IGRyb3B6b25lSUQsXHJcbiAgICAgIGNhcGFjaXR5LFxyXG4gICAgICBwYXJlbnRJRCxcclxuICAgICAgYWxsb3dIb3Jpem9udGFsXHJcbiAgICB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IGRyb3BQb3NpdGlvbiA9IGNvcmUuZ2V0RHJvcFBvc3Rpb24oKTtcclxuICAgIGNvbnN0IGRyYWdnZWRFbGVtZW50ID0gY29yZS5nZXREcmFnZ2VkRWxlbWVudCgpO1xyXG4gICAgY29uc3QgaW52YWxpZFVwZGF0ZWREYXRhID0gIXVwZGF0ZWREYXRhIHx8ICF1cGRhdGVkRGF0YS5pZDtcclxuICAgIGxldCBpbmRleE9mUHJlc2VudEVsZW1lbnQgPSAtMTtcclxuICAgIGNvbnN0IGtleUFscmVhZHlQcmVzZW50ID0gdXBkYXRlZERhdGEuaWQgJiZcclxuICAgICAgdGhpcy5zdGF0ZS5kcm9wcGVkRWxlbWVudHMuZmlsdGVyKChlLCBpKSA9PiB7XHJcbiAgICAgICAgaWYgKGUuaWQgPT09IHVwZGF0ZWREYXRhLmlkKSB7XHJcbiAgICAgICAgICBpbmRleE9mUHJlc2VudEVsZW1lbnQgPSBpO1xyXG5cclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9KS5sZW5ndGg7XHJcbiAgICBjb25zdCBpc1NhbWVJbmRleCA9IGluZGV4T2ZQcmVzZW50RWxlbWVudCA9PT0gZHJvcFBvc2l0aW9uO1xyXG4gICAgbGV0IG5ld0VsZW1lbnRzID0gW10uY29uY2F0KHRoaXMuc3RhdGUuZHJvcHBlZEVsZW1lbnRzKTtcclxuICAgIGxldCBlbGVtZW50QWxyZWFkeVJlbW92ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBjaGVjayBmbyB1bmlxdWUga2V5XHJcbiAgICBpZiAoaW52YWxpZFVwZGF0ZWREYXRhIHx8IGtleUFscmVhZHlQcmVzZW50KSB7XHJcbiAgICAgIGlmIChpc1NhbWVJbmRleCkge1xyXG4gICAgICAgIHJldHVybiBjb3JlLmVycm9yKCdEdXBsaWNhdGUgb3IgaW52YWxpZCBJRCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlbGVtZW50QWxyZWFkeVJlbW92ZWQgPSB0cnVlO1xyXG4gICAgICBuZXdFbGVtZW50cyA9IG5ld0VsZW1lbnRzLm1hcCgoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLmlkID09PSB1cGRhdGVkRGF0YS5pZCkge1xyXG4gICAgICAgICAgcmV0dXJuIHsgLi4uZSwgcmVtb3ZlOiB0cnVlIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaW5pdGlhbEVsZW1lbnRzVG9CaW5kID0gbnVsbDtcclxuICAgIGlmICh1cGRhdGVkRGF0YS5kcm9wem9uZUlEICYmIHVwZGF0ZWREYXRhLnBhcmVudElEKSB7XHJcbiAgICAgIGNvbnN0IG9sZENvcHkgPSBzdGF0ZS50cmF2ZXJzZUFuZFJldHVybkVsZW1lbnQodXBkYXRlZERhdGEuaWQsIHVwZGF0ZWREYXRhLmRyb3B6b25lSUQsIHVwZGF0ZWREYXRhLnBhcmVudElEKTtcclxuICAgICAgaW5pdGlhbEVsZW1lbnRzVG9CaW5kID0gb2xkQ29weSAmJiBvbGRDb3B5LmZpZWxkcyB8fCBbXTtcclxuICAgICAgY29uc3QgYXNzaWduSW5pdGlhbEVsZW1lbnRzID0gKGxpc3QpID0+IHtcclxuICAgICAgICBsaXN0LmZvckVhY2goZSA9PiB7XHJcbiAgICAgICAgICBpZiAoZS5maWVsZHMpIHtcclxuICAgICAgICAgICAgZS5pbml0aWFsRWxlbWVudHMgPSBlLmZpZWxkcztcclxuICAgICAgICAgICAgYXNzaWduSW5pdGlhbEVsZW1lbnRzKGUuZmllbGRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXNzaWduSW5pdGlhbEVsZW1lbnRzKGluaXRpYWxFbGVtZW50c1RvQmluZCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZWxlbWVudFRvRHJvcCA9IHtcclxuICAgICAgLi4udXBkYXRlZERhdGEsXHJcbiAgICAgIGtleTogdXBkYXRlZERhdGEuaWQsXHJcbiAgICAgIGRyb3B6b25lSUQsXHJcbiAgICAgIHBhcmVudElELFxyXG4gICAgICBhbGxvd0hvcml6b250YWwsXHJcbiAgICAgIHNob3dCYXNpY0NvbnRlbnQ6IGZhbHNlLFxyXG4gICAgICB1cGRhdGVTdGF0ZTogdGhpcy5fdXBkYXRlU3RhdGUsXHJcbiAgICAgIHJlbW92ZUVsZW1lbnQ6IHRoaXMuX3JlbW92ZUVsZW1lbnQsXHJcbiAgICAgIHVwZGF0ZUVsZW1lbnQ6IHRoaXMuX3VwZGF0ZUVsZW1lbnQsXHJcbiAgICAgIC8vIGluaXRpYWxFbGVtZW50cyBoZWxwcyBmaWd1cmluZyBvdXQgaW5pdERvbmVcclxuICAgICAgaW5pdGlhbEVsZW1lbnRzOiBpbml0aWFsRWxlbWVudHNUb0JpbmQgfHwgdGhpcy5zdGF0ZS5pbml0aWFsRWxlbWVudHMsXHJcbiAgICAgIGZsdXNoRHJvcHBlZEVsZW1lbnRzOiB0aGlzLl9mbHVzaERyb3BwZWRFbGVtZW50cyxcclxuICAgICAgY2hlY2tBbmRSZW1vdmVFbGVtZW50OiB0aGlzLl9jaGVja0FuZFJlbW92ZUVsZW1lbnRcclxuICAgIH07XHJcblxyXG4gICAgaWYgKGRyb3BQb3NpdGlvbiA+IDApIHtcclxuICAgICAgbmV3RWxlbWVudHMgPSBbXHJcbiAgICAgICAgLi4ubmV3RWxlbWVudHMuc2xpY2UoMCwgZHJvcFBvc2l0aW9uKSxcclxuICAgICAgICBlbGVtZW50VG9Ecm9wLFxyXG4gICAgICAgIC4uLm5ld0VsZW1lbnRzLnNsaWNlKGRyb3BQb3NpdGlvbilcclxuICAgICAgXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5ld0VsZW1lbnRzID0gW1xyXG4gICAgICAgIGVsZW1lbnRUb0Ryb3AsXHJcbiAgICAgICAgLi4ubmV3RWxlbWVudHNcclxuICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzU2FtZUluZGV4KSB7XHJcbiAgICAgIG5ld0VsZW1lbnRzID0gbmV3RWxlbWVudHMuZmlsdGVyKGUgPT4gIWUucmVtb3ZlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjaGVjayBuZXcgbGlzdCBhZ2FpbnN0IG1heC1jYXBhY2l0eVxyXG4gICAgaWYgKGNhcGFjaXR5ICYmIG5ld0VsZW1lbnRzLmxlbmd0aCA+IGNhcGFjaXR5KSB7XHJcbiAgICAgIHJldHVybiBjb3JlLmVycm9yKGBNYXhpbXVtIGNhcGFjaXR5IG9mIGNhbnZhcygke2Ryb3B6b25lSUR9KSBpcyAke2NhcGFjaXR5fWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHVwZGF0ZSB0aGUgY3VycmVudCBsaXN0XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgZHJvcHBlZEVsZW1lbnRzOiBuZXdFbGVtZW50c1xyXG4gICAgfSwgKCkgPT4ge1xyXG4gICAgICAvLyByZW1vdmUgZWxlbWVudCBmcm9tIHByZXZpb3VzIGNhbnZhc1xyXG4gICAgICBpZiAoIWVsZW1lbnRBbHJlYWR5UmVtb3ZlZCAmJiBkcmFnZ2VkRWxlbWVudCAmJiB0eXBlb2YgZHJhZ2dlZEVsZW1lbnQuY2hlY2tBbmRSZW1vdmVFbGVtZW50ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgZHJhZ2dlZEVsZW1lbnQuY2hlY2tBbmRSZW1vdmVFbGVtZW50KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHVwZGF0ZSB0aGUgYXBwbGljYXRpb24gc3RhdGVcclxuICAgICAgdGhpcy5fdXBkYXRlU3RhdGUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGFkZGluZyBkcm9wcGluZyBjbGFzcyB0byBkcm9wem9uZSwgaXQgY2FuIGJlIHVzZWQgZm9yIGFuaW1hdGlvbiBwdXJwb3NlXHJcbiAgICB0aGlzLmNhbnZhc1JlZi5jdXJyZW50LmNsYXNzTGlzdC5hZGQoJ2Ryb3BwaW5nJyk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5jYW52YXNSZWYuY3VycmVudCAmJiB0aGlzLmNhbnZhc1JlZi5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2Ryb3BwaW5nJyk7XHJcbiAgICB9LCA1MDApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRyb3B6b25lSUQsXHJcbiAgICAgIGVsZW1lbnRzOiBuZXdFbGVtZW50c1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIHJlbmRlciB0aGUgZHJhZ2dlZCBlbGVtZW50XHJcbiAgICogQHBhcmFtIHByb3BzIHtPYmplY3R9IC0gQW4gb2JqZWN0IHdoaWNoIGhvbGQgdGhlIGluZm8gb2YgZHJhZ2dlZCBlbGVtZW50L2NvbXBvbmVudFxyXG4gICAqIEByZXR1cm5zIEpTWFxyXG4gICAqL1xyXG4gIF9yZW5kZXJEcmFnSXRlbSA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IGNvcmUuZ2V0UmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cygpLmZpbmQoZSA9PiBlLnR5cGUgPT09IHByb3BzLnR5cGUpO1xyXG4gICAgcmV0dXJuIGVsZW1lbnQgPyA8ZWxlbWVudC5jb21wb25lbnQgey4uLnByb3BzfSAvPiA6IG51bGw7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGRyb3BwZWRFbGVtZW50cyB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHsgY2FwYWNpdHksIGlkLCBwbGFjZWhvbGRlciB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHNwYWNlQXZhaWxhYmxlID0gY2FwYWNpdHkgPyBjYXBhY2l0eSA+IGRyb3BwZWRFbGVtZW50cy5sZW5ndGggOiB0cnVlO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXZcclxuICAgICAgICByZWY9e3RoaXMuY2FudmFzUmVmfVxyXG4gICAgICAgIGNsYXNzTmFtZT17YCR7IXNwYWNlQXZhaWxhYmxlID8gJ25vLXNwYWNlJyA6ICcnfSAke2lkID09PSAncm9vdCcgPyAnY2FudmFzJyA6ICcnfSAkeyFkcm9wcGVkRWxlbWVudHMubGVuZ3RoID8gJ2VtcHR5JyA6ICcnfSBkcm9wem9uZWB9XHJcbiAgICAgICAgb25EcmFnT3Zlcj17dGhpcy5fb25EcmFnT3Zlcn1cclxuICAgICAgICBvbkRyYWdMZWF2ZT17dGhpcy5fb25EcmFnTGVhdmV9XHJcbiAgICAgICAgb25EcmFnRW50ZXI9e3RoaXMuX29uRHJhZ0VudGVyfVxyXG4gICAgICAgIG9uRHJvcD17dGhpcy5fb25Ecm9wfVxyXG4gICAgICAgIG9uRHJhZ0VuZD17dGhpcy5fb25EcmFnRW5kfVxyXG4gICAgICA+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZHJvcHBlZEVsZW1lbnRzLm1hcCgoZSwgaSkgPT4gKFxyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJEcmFnSXRlbSh7XHJcbiAgICAgICAgICAgICAgLi4uZSxcclxuICAgICAgICAgICAgICBpbmRleDogaSxcclxuICAgICAgICAgICAgICBzcGFjZUF2YWlsYWJsZSxcclxuICAgICAgICAgICAgICBpbml0RG9uZTogdGhpcy5zdGF0ZS5pbml0RG9uZSxcclxuICAgICAgICAgICAgICBkcm9wem9uZVByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICBpbml0RG9uZTogdGhpcy5zdGF0ZS5pbml0RG9uZSxcclxuICAgICAgICAgICAgICAgIHBhcmVudElEOiBlLmlkXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICFkcm9wcGVkRWxlbWVudHMubGVuZ3RoID9cclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZHJvcHpvbmUtcGxhY2Vob2xkZXJcIj57cGxhY2Vob2xkZXJ9PC9wPiA6IG51bGxcclxuICAgICAgICB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbkRyb3B6b25lLnByb3BUeXBlcyA9IHtcclxuICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG4gIGNhcGFjaXR5OiBQcm9wVHlwZXMubnVtYmVyLFxyXG4gIG9uRHJvcDogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgb25FbGVtZW50TW92ZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgYWxsb3dIb3Jpem9udGFsOiBQcm9wVHlwZXMuYm9vbCxcclxuICBpbml0aWFsRWxlbWVudHM6IFByb3BUeXBlcy5hcnJheU9mKE9iamVjdCksXHJcbiAgcGFyZW50SUQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcbiAgICBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgUHJvcFR5cGVzLm5vZGVcclxuICBdKVxyXG59O1xyXG5cclxuRHJvcHpvbmUuZGVmYXVsdFByb3BzID0ge1xyXG4gIGluaXRpYWxFbGVtZW50czogW10sXHJcbiAgcGxhY2Vob2xkZXI6ICdEcm9wIEhlcmUnLFxyXG4gIG9uRWxlbWVudE1vdmU6ICgpID0+ICh0cnVlKVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRHJvcHpvbmU7XHJcbiIsIi8vIGltcG9ydCBhbGwgY29tcG9uZW50c1xyXG5pbXBvcnQgQ2FudmFzIGZyb20gJy4vY29tcG9uZW50cy9DYW52YXMvQ2FudmFzJztcclxuaW1wb3J0IERyb3B6b25lIGZyb20gJy4vY29tcG9uZW50cy9Ecm9wem9uZS9Ecm9wem9uZSc7XHJcbmltcG9ydCBEcmFnZ2FibGUgZnJvbSAnLi9jb21wb25lbnRzL0RyYWdnYWJsZS9EcmFnZ2FibGUnO1xyXG5pbXBvcnQgUGFsZXR0ZSBmcm9tICcuL2NvbXBvbmVudHMvUGFsZXR0ZS9QYWxldHRlJztcclxuaW1wb3J0IFRyYXNoIGZyb20gJy4vY29tcG9uZW50cy9UcmFzaC9UcmFzaCc7XHJcbmltcG9ydCBQcmV2aWV3IGZyb20gJy4vY29tcG9uZW50cy9QcmV2aWV3L1ByZXZpZXcnO1xyXG5cclxuLy8gaW1wb3J0IGFsbCBBUEknc1xyXG5pbXBvcnQgc3RhdGUgZnJvbSAnLi9jb3JlL3N0YXRlJztcclxuaW1wb3J0IGNvcmUgZnJvbSAnLi9jb3JlL2NvcmUnO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgLy8gYWxsIGNvbXBvbmVudHNcclxuICBDYW52YXMsXHJcbiAgRHJvcHpvbmUsXHJcbiAgRHJhZ2dhYmxlLFxyXG4gIFBhbGV0dGUsXHJcbiAgVHJhc2gsXHJcbiAgUHJldmlldyxcclxuXHJcbiAgLy8gYWxsIG9wZW4gQVBJJ3NcclxuICBzdGF0ZSxcclxuICBjb3JlLFxyXG5cclxuICAvLyBzaW5jZSB0aGlzIGlzIHJldWlyZWQgZnVuY3Rpb24sIGtlZXBpbmcgc2VwcmF0ZVxyXG4gIHJlZ2lzdGVyUGFsZXR0ZUVsZW1lbnRzOiBjb3JlLnJlZ2lzdGVyUGFsZXR0ZUVsZW1lbnRzXHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgRHJvcHpvbmUgZnJvbSAnLi4vRHJvcHpvbmUvRHJvcHpvbmUnO1xyXG5cclxuLy8gZnVuY3Rpb25hbCBjb21wb25lbnQgd2hpY2ggZXh0ZW5kcyBEcm9wem9uZSBidXQgd2l0aCBzb21lIGZpeGVkIHByb3BlcnRpZXMgLSBpZCBhbmQgcGFyZW50SURcclxuLy8gYm90aCBwcm9wcyBzZXQgdG8gYHJvb3RgIC0gcmVxdWlyZWQgc2luY2UgYXBwbGljYXRpb24gc3RhdGUgaG9sZHMgYHJvb3RgIGFzIHBhcmVudCBub2RlXHJcbi8vIGRlZmF1bHQgaW5pdERvbmUgc2V0IHRvIHRydWVcclxuY29uc3QgQ2FudmFzID0gcHJvcHMgPT4gKFxyXG4gIDxkaXYgY2xhc3NOYW1lPVwibWFpbi1jYW52YXNcIj5cclxuICAgIDxEcm9wem9uZSB7Li4ucHJvcHN9IHBhcmVudElEPVwicm9vdFwiIGlkPVwicm9vdFwiIGluaXREb25lIC8+XHJcbiAgPC9kaXY+XHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYW52YXM7XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJpbXBvcnQgY29yZSBmcm9tICcuL2NvcmUnO1xyXG5pbXBvcnQgc3RhdGUgZnJvbSAnLi9zdGF0ZSc7XHJcblxyXG4vLyBkb250IHdhbnQgYW55IGNvbmZsaWN0cyB3aXRoIEpTIEV2ZW50IGFuZCBDdXN0b21FdmVudCBPYmplY3QgaGVuY2Uga2VlcGluZyBuYW1lIGFzIFJwbUV2ZW50XHJcbmNsYXNzIFJwbUV2ZW50IHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIC8vIHN1cHBvcnRlZCBldmVudHNcclxuICAgIHRoaXMuZXZlbnQgPSB7XHJcbiAgICAgIGNoYW5nZTogW10sXHJcbiAgICAgIGZsdXNoOiBbXSxcclxuICAgICAgcmVtb3ZlRWxlbWVudDogW10sXHJcbiAgICAgIHVwZGF0ZUVsZW1lbnQ6IFtdXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gcHJpdmF0ZSBmdW5jdGlvbiB0byB0cmlnZ2VyIGFsbCBjaGFuZ2UgQ0JcclxuICBub3RpZnlTdGF0ZUNoYW5nZSA9ICgpID0+IHtcclxuICAgIC8vIHRyaWdnZXIgYWxsIGV2ZW50c1xyXG4gICAgdGhpcy5ldmVudC5jaGFuZ2UuZm9yRWFjaChlID0+IGUoc3RhdGUuZ2V0U3RhdGUoKSkpO1xyXG4gIH07XHJcblxyXG4gIC8vIHByaXZhdGUgZnVuY3Rpb24gdG8gdHJpZ2dlciBhbGwgZmx1c2ggQ0JcclxuICAvLyBzdGF0ZSBoYXMgYmVlbiByZXNldCB0byBlbXB0eSwgdHJpZ2dlciBmaW5hbCBjaGFuZ2UgYW5kIHRoZW4gZmx1c2ggZXZlbnRcclxuICBub3RpZnlTdGF0ZUZsdXNoID0gKHRyaWdnZXJDaGFuZ2UpID0+IHtcclxuICAgIGlmICh0cmlnZ2VyQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U3RhdGVDaGFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0cmlnZ2VyIGFsbCBldmVudHNcclxuICAgIHRoaXMuZXZlbnQuZmx1c2guZm9yRWFjaChlID0+IGUodHJ1ZSkpO1xyXG4gIH07XHJcblxyXG4gIC8vIHByaXZhdGUgZnVuY3Rpb24gdG8gdHJpZ2dlciBhbGwgZWxlbWVudCB1cGRhdGUgQ0JcclxuICBub3RpZnlFbGVtZW50VXBkYXRlID0gKGVsZW1lbnQpID0+IHtcclxuICAgIC8vIHRyaWdnZXIgYWxsIGV2ZW50c1xyXG4gICAgdGhpcy5ldmVudC51cGRhdGVFbGVtZW50LmZvckVhY2goZSA9PiBlKGVsZW1lbnQpKTtcclxuICB9O1xyXG5cclxuICAvLyBwcml2YXRlIGZ1bmN0aW9uIHRvIHRyaWdnZXIgYWxsIGVsZW1lbnQgcmVtb3ZlIENCXHJcbiAgbm90aWZ5RWxlbWVudFJlbW92ZSA9IChlbGVtZW50KSA9PiB7XHJcbiAgICAvLyB0cmlnZ2VyIGFsbCBldmVudHNcclxuICAgIHRoaXMuZXZlbnQucmVtb3ZlRWxlbWVudC5mb3JFYWNoKGUgPT4gZShlbGVtZW50KSk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogZnVuY3Rpb24gdG8gYWRkIGV2ZW50XHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIC0gY2FsbGJhY2tcclxuICAgKi9cclxuICBhZGRFdmVudExpc3RlbmVyID0gKGV2ZW50TmFtZSwgY2IpID0+IHtcclxuICAgIGxldCByZXR1cm5DQiA9IG51bGw7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBjb3JlLmVycm9yKCdgY2JgIHBhcmFtIGhhcyB0byBiZSBmdW5jdGlvbicpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmV2ZW50LCBldmVudE5hbWUpKSB7XHJcbiAgICAgIHRoaXMuZXZlbnRbZXZlbnROYW1lXS5wdXNoKGNiKTtcclxuXHJcbiAgICAgIHJldHVybkNCID0gY2I7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb3JlLmVycm9yKCdObyBzdWNoIGV2ZW50Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJldHVybkNCO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIHJlbW92ZSBldmVudFxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiAtIGNhbGxiYWNrXHJcbiAgICovXHJcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IChldmVudE5hbWUsIGNiKSA9PiB7XHJcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZXZlbnQsIGV2ZW50TmFtZSkpIHtcclxuICAgICAgdGhpcy5ldmVudFtldmVudE5hbWVdID0gdGhpcy5ldmVudFtldmVudE5hbWVdLmZpbHRlcihlID0+IGUgIT09IGNiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvcmUuZXJyb3IoJ05vIHN1Y2ggZXZlbnQnKTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG5jb25zdCBycG1FdmVudCA9IG5ldyBScG1FdmVudCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcnBtRXZlbnQ7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5pbXBvcnQgY29yZSBmcm9tICcuLi8uLi9jb3JlL2NvcmUnO1xyXG5cclxuY2xhc3MgRHJhZ2dhYmxlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgIHRoaXMuZHJhZ0VsZW1SZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcbiAgICAvLyB1cGRhdGUgdGhlIHN0YXRlIG9uY2UgcGFyZW50IHN0YXRlIGluaXRpYWxpc2F0aW9uIGlzIGRvbmVcclxuICAgIGlmICh0aGlzLnByb3BzLmluaXREb25lICE9PSBuZXh0UHJvcHMuaW5pdERvbmUgJiYgbmV4dFByb3BzLmluaXREb25lKSB7XHJcbiAgICAgIHRoaXMucHJvcHMudXBkYXRlU3RhdGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9kcmFnRW5kID0gKGUpID0+IHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JlZm9yZScsICdhZnRlcicpO1xyXG5cclxuICAgIC8vIGRvbmUgZHJhZ2dpbmcsIHJlc2V0IGRyYWdnZWQgZWxlbWVudFxyXG4gICAgY29yZS5zZXREcmFnZ2VkRWxlbWVudChudWxsKTtcclxuICB9XHJcblxyXG4gIF9kcmFnU3RhcnQgPSAoZSkgPT4ge1xyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGlkLFxyXG4gICAgICB0eXBlLFxyXG4gICAgICBuYW1lLFxyXG4gICAgICBmaWVsZHMsXHJcbiAgICAgIHBheWxvYWQsXHJcbiAgICAgIHBhcmVudElELFxyXG4gICAgICBkcm9wem9uZUlELFxyXG4gICAgICByZW1vdmVFbGVtZW50LFxyXG4gICAgICBjaGVja0FuZFJlbW92ZUVsZW1lbnRcclxuICAgIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgIGlkLFxyXG4gICAgICB0eXBlLFxyXG4gICAgICBuYW1lLFxyXG4gICAgICBwYXlsb2FkLFxyXG4gICAgICBwYXJlbnRJRCxcclxuICAgICAgZHJvcHpvbmVJRFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoZmllbGRzKSB7XHJcbiAgICAgIGRhdGEuZmllbGRzID0gZmllbGRzO1xyXG4gICAgfVxyXG5cclxuICAgIGUuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnY29weSc7XHJcbiAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKCdkYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpOyAvLyByZXF1aXJlZCwgd2UgY2Fubid0IHBhc3MgSlMgb2JqZWN0XHJcblxyXG4gICAgLy8gaWYgZWxlbWVudCBpcyBhbHJlYWR5IHByZXNlbnQgaW4gc29tZSBjYW52YXNcclxuICAgIC8vIHRoZW4gc2V0IGRyYWdnZWRFbGVtZW50LCBzbyB0aGF0IHRoaXMgd2lsbCBoZWxwIHRvIHJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIHByZXZpb3VzIGNhbnZhc1xyXG4gICAgaWYgKGRyb3B6b25lSUQpIHtcclxuICAgICAgY29yZS5zZXREcmFnZ2VkRWxlbWVudCh7XHJcbiAgICAgICAgZWxlbWVudElEOiBpZCxcclxuICAgICAgICBkcm9wem9uZUlELFxyXG4gICAgICAgIHJlbW92ZUVsZW1lbnQsXHJcbiAgICAgICAgY2hlY2tBbmRSZW1vdmVFbGVtZW50XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZnVuY3Rpb24gdG8gc2V0IGRyb3AgcG9zaXRpb24uXHJcbiAgICogZmlyc3QgZmluZSBtaWQgb2YgZWxlbWVudCB1cG9uIHdoaWNoIHVzZXIgaXMgZHJhZ2dpbmcgb3ZlciBhbmRcclxuICAgKiBiYXNlZCBvbiB0aGF0IGRlY2lkZSB3aGV0aGVyIHVzZXIgdHJ5aW5nIHRvIGRyb3AgYW4gZWxlbWVudCBhYm92ZSBvciBiZWxvd1xyXG4gICAqL1xyXG4gIF9vbkRyYWdPdmVyID0gKGUpID0+IHtcclxuICAgIGNvbnN0IGVsZW1Db3JkID0gdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgIGlmICghdGhpcy5wcm9wcy5zcGFjZUF2YWlsYWJsZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMucHJvcHMuYWxsb3dIb3Jpem9udGFsKSB7XHJcbiAgICAgIGNvbnN0IGRyYWdFbGVtWCA9IGUuY2xpZW50WDtcclxuICAgICAgaWYgKGRyYWdFbGVtWCA+PSBlbGVtQ29yZC54ICYmIGRyYWdFbGVtWCA8PSBlbGVtQ29yZC54ICsgZWxlbUNvcmQud2lkdGgpIHtcclxuICAgICAgICBjb25zdCBtaWRYID0gZWxlbUNvcmQueCArIGVsZW1Db3JkLndpZHRoIC8gMjtcclxuICAgICAgICBpZiAoZHJhZ0VsZW1YIDwgbWlkWCkge1xyXG4gICAgICAgICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FmdGVyJyk7XHJcbiAgICAgICAgICB0aGlzLmRyYWdFbGVtUmVmLmN1cnJlbnQuY2xhc3NMaXN0LmFkZCgnYmVmb3JlJyk7XHJcbiAgICAgICAgICBjb3JlLnNldERyb3BQb3N0aW9uKHRoaXMucHJvcHMuaW5kZXgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmRyYWdFbGVtUmVmLmN1cnJlbnQuY2xhc3NMaXN0LnJlbW92ZSgnYmVmb3JlJyk7XHJcbiAgICAgICAgICB0aGlzLmRyYWdFbGVtUmVmLmN1cnJlbnQuY2xhc3NMaXN0LmFkZCgnYWZ0ZXInKTtcclxuICAgICAgICAgIGNvcmUuc2V0RHJvcFBvc3Rpb24odGhpcy5wcm9wcy5pbmRleCArIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgZHJhZ0VsZW1ZID0gZS5jbGllbnRZO1xyXG4gICAgICBpZiAoZHJhZ0VsZW1ZID49IGVsZW1Db3JkLnkgJiYgZHJhZ0VsZW1ZIDw9IGVsZW1Db3JkLnkgKyBlbGVtQ29yZC5oZWlnaHQpIHtcclxuICAgICAgICBjb25zdCBtaWRZID0gZWxlbUNvcmQueSArIGVsZW1Db3JkLmhlaWdodCAvIDI7XHJcbiAgICAgICAgaWYgKGRyYWdFbGVtWSA8IG1pZFkpIHtcclxuICAgICAgICAgIHRoaXMuZHJhZ0VsZW1SZWYuY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKCdhZnRlcicpO1xyXG4gICAgICAgICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5hZGQoJ2JlZm9yZScpO1xyXG4gICAgICAgICAgY29yZS5zZXREcm9wUG9zdGlvbih0aGlzLnByb3BzLmluZGV4KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JlZm9yZScpO1xyXG4gICAgICAgICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5hZGQoJ2FmdGVyJyk7XHJcbiAgICAgICAgICBjb3JlLnNldERyb3BQb3N0aW9uKHRoaXMucHJvcHMuaW5kZXggKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIF9vbkRyYWdMZWF2ZSA9ICgpID0+IHtcclxuICAgIC8vIHJlbW92ZSBiZWZvcmUvYWZ0ZXIgY2xhc3MgZnJvbSBkcmFnZ2VkIGVsZW1lbnRcclxuICAgIHRoaXMuZHJhZ0VsZW1SZWYuY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKCdiZWZvcmUnLCAnYWZ0ZXInKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgZWxlbWVudFByb3BzLCBkcmFnZ2FibGUsIGFsbG93SG9yaXpvbnRhbCB9ID0gdGhpcy5wcm9wcztcclxuICAgIGxldCBlID0gbnVsbDtcclxuXHJcbiAgICBpZiAodGhpcy5wcm9wcy5kcm9wem9uZUlEKSB7XHJcbiAgICAgIC8vIGFkZCB0aGlzIHJlcXVpcmVkIGZ1bmN0aW9uIG9ubHkgaWYgZWxlbWVudCBpcyBkcm9wcGVkIGluIGNhbnZhc1xyXG4gICAgICBlID0ge1xyXG4gICAgICAgIG9uRHJhZ092ZXI6IHRoaXMuX29uRHJhZ092ZXIsXHJcbiAgICAgICAgb25EcmFnTGVhdmU6IHRoaXMuX29uRHJhZ0xlYXZlXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRyYWdnYWJsZSkge1xyXG4gICAgICBlID0ge1xyXG4gICAgICAgIC4uLmUsXHJcbiAgICAgICAgZHJhZ2dhYmxlOiB0cnVlXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdlxyXG4gICAgICAgIHJlZj17dGhpcy5kcmFnRWxlbVJlZn1cclxuICAgICAgICBjbGFzc05hbWU9e2BkcmFnLWl0ZW0gJHthbGxvd0hvcml6b250YWwgPyAnaW5saW5lJyA6ICcnfWB9XHJcbiAgICAgICAgb25EcmFnU3RhcnQ9e3RoaXMuX2RyYWdTdGFydH1cclxuICAgICAgICBvbkRyYWdFbmQ9e3RoaXMuX2RyYWdFbmR9XHJcbiAgICAgICAgey4uLmVsZW1lbnRQcm9wc31cclxuICAgICAgICB7Li4uZX1cclxuICAgICAgPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cclxuICAgICAgICB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbkRyYWdnYWJsZS5wcm9wVHlwZXMgPSB7XHJcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGluaXREb25lOiBQcm9wVHlwZXMuYm9vbCxcclxuICBpbmRleDogUHJvcFR5cGVzLm51bWJlcixcclxuICBhbGxvd0hvcml6b250YWw6IFByb3BUeXBlcy5ib29sLFxyXG4gIGZpZWxkczogUHJvcFR5cGVzLmluc3RhbmNlT2YoQXJyYXkpLFxyXG4gIGRyYWdnYWJsZTogUHJvcFR5cGVzLmJvb2wsXHJcbiAgc3BhY2VBdmFpbGFibGU6IFByb3BUeXBlcy5ib29sLFxyXG4gIHVwZGF0ZVN0YXRlOiBQcm9wVHlwZXMuZnVuYyxcclxuICBkcm9wem9uZUlEOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHBhcmVudElEOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHBheWxvYWQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE9iamVjdCksXHJcbiAgZWxlbWVudFByb3BzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihPYmplY3QpLFxyXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcbiAgICBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuZWxlbWVudCksXHJcbiAgICBQcm9wVHlwZXMuZWxlbWVudFxyXG4gIF0pLmlzUmVxdWlyZWQsXHJcbiAgcmVtb3ZlRWxlbWVudDogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgY2hlY2tBbmRSZW1vdmVFbGVtZW50OiBQcm9wVHlwZXMuZnVuY1xyXG59O1xyXG5cclxuRHJhZ2dhYmxlLmRlZmF1bHRQcm9wcyA9IHtcclxuICBjaGVja0FuZFJlbW92ZUVsZW1lbnQ6ICgpID0+ICh0cnVlKSxcclxuICBlbGVtZW50UHJvcHM6IG51bGwsXHJcbiAgcGF5bG9hZDogbnVsbCxcclxuICBkcmFnZ2FibGU6IHRydWUsXHJcbiAgdXBkYXRlU3RhdGU6ICgpID0+ICh0cnVlKVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRHJhZ2dhYmxlO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuaW1wb3J0IGNvcmUgZnJvbSAnLi4vLi4vY29yZS9jb3JlJztcclxuXHJcbmNsYXNzIFBhbGV0dGUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIHJlbmRlciB0aGUgZHJhZ2dlZCBlbGVtZW50XHJcbiAgICogQHBhcmFtIHByb3BzIHtPYmplY3R9IC0gQW4gb2JqZWN0IHdoaWNoIGhvbGQgdGhlIGluZm8gb2YgZHJhZ2dlZCBlbGVtZW50L2NvbXBvbmVudFxyXG4gICAqIEByZXR1cm5zIEpTWFxyXG4gICAqL1xyXG4gIF9yZW5kZXJMaXN0ID0gKHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gY29yZS5nZXRSZWdpc3RlcmVkUGFsZXR0ZUVsZW1lbnRzKCkuZmluZChlID0+IGUudHlwZSA9PT0gcHJvcHMudHlwZSk7XHJcbiAgICByZXR1cm4gZWxlbWVudCA/IDxlbGVtZW50LmNvbXBvbmVudCB7Li4ucHJvcHN9IC8+IDogbnVsbDtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgcGFsZXR0ZUVsZW1lbnRzIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFsZXR0ZVwiPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHBhbGV0dGVFbGVtZW50cy5tYXAoaXRlbSA9PiAoXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckxpc3QoeyAuLi5pdGVtLCBrZXk6IGl0ZW0uaWQsIHNob3dCYXNpY0NvbnRlbnQ6IHRydWUgfSlcclxuICAgICAgICAgICkpXHJcbiAgICAgICAgfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5QYWxldHRlLnByb3BUeXBlcyA9IHtcclxuICBwYWxldHRlRWxlbWVudHM6IFByb3BUeXBlcy5hcnJheU9mKChwcm9wVmFsdWUpID0+IHtcclxuICAgIGxldCBpc0Vycm9yID0gZmFsc2U7XHJcblxyXG4gICAgLy8gYWxsIHBhbGV0dGUgZWxlbWVudHMgc2hvdWxkIGhhdmUgdW5pcXVlIElEXHJcbiAgICBwcm9wVmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBpZiAoaXRlbSAmJiAhaXRlbS5pZCkge1xyXG4gICAgICAgIGlzRXJyb3IgPSAnYGlkYCBpcyByZXF1aXJlZCBpbiBhbGwgcGFsZXR0ZSBlbGVtZW50JztcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHByb3BWYWx1ZS5maWx0ZXIoaSA9PiBpLmlkID09PSBpdGVtLmlkKS5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgaXNFcnJvciA9ICdgaWRgIG9mIHBhbGV0dGUgZWxlbWVudCBzaG91bGQgYmUgdW5pcXVlJztcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGlzRXJyb3IgPyBuZXcgRXJyb3IoaXNFcnJvcikgOiB0cnVlO1xyXG4gIH0pXHJcbn07XHJcblxyXG5QYWxldHRlLmRlZmF1bHRQcm9wcyA9IHtcclxuICBwYWxldHRlRWxlbWVudHM6IFtdXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYWxldHRlO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuaW1wb3J0IGNvcmUgZnJvbSAnLi4vLi4vY29yZS9jb3JlJztcclxuXHJcbmNsYXNzIFRyYXNoIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgIC8vIGNyZWF0ZSByZWZyZW5jZSBmb3IgdHJhc2hcclxuICAgIC8vIHRvIGNoZWNrIHdoZXRoZXIgaXMgZHJhZ2dpbmcgb24gdHJhc2ggYm94IG9yIG5vdFxyXG4gICAgdGhpcy50cmFzaFJlZiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZnVuY3Rpb24gdG8gdG9nZ2xlL21hbmFnZSBjbGFzcyhpbnNpZGUpXHJcbiAgICogY2xhc3MgZ2V0cyBhcHBlbmRlZCB0byBjYW52YXNcclxuICAgKiBAcGFyYW0gdGFyZ2V0IHtET019IC0gY3VycmVudCBjYW52YXMgdXBvbiB3aGljaCB1c2UgaXMgaG92ZXJpbmdcclxuICAgKiBAcGFyYW0gYWN0aW9uIHtTdHJpbmd9IC0gYWRkL3JlbW92ZSAtIG5hbWUgb2YgYWN0aW9uXHJcbiAgICovXHJcbiAgX21hbmFnZUluc2lkZUNsYXNzID0gKHsgdGFyZ2V0IH0sIGFjdGlvbikgPT4ge1xyXG4gICAgaWYgKHRoaXMudHJhc2hSZWYuY3VycmVudCA9PT0gdGFyZ2V0KSB7XHJcbiAgICAgIHRhcmdldC5jbGFzc0xpc3RbYWN0aW9uXSgnaW5zaWRlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfb25Ecm9wID0gKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgLy8gZ2V0IGRyYWdnZWQgZWxlbWVudFxyXG4gICAgY29uc3QgZWxlbWVudFRvQmVUcmFzaGVkID0gY29yZS5nZXREcmFnZ2VkRWxlbWVudCgpO1xyXG5cclxuICAgIC8vIGRvbnQgYWxsb3cgZWxlbWVudHMgd2hpY2ggZGlyZWN0bHkgY29taW5nIGZyb20gcGFsZXR0ZVxyXG4gICAgaWYgKCFlbGVtZW50VG9CZVRyYXNoZWQpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgb25CZWZvcmVUcmFzaCwgb25BZnRlclRyYXNoIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgeyByZW1vdmVFbGVtZW50IH0gPSBlbGVtZW50VG9CZVRyYXNoZWQ7XHJcbiAgICBjb25zdCBzdGF0dXMgPSBvbkJlZm9yZVRyYXNoKGVsZW1lbnRUb0JlVHJhc2hlZCk7XHJcblxyXG4gICAgdGhpcy5fbWFuYWdlSW5zaWRlQ2xhc3MoZSwgJ3JlbW92ZScpO1xyXG5cclxuICAgIC8vIHVzZXIgdHJpZWQgYW5kIGNvbmZpcm0gdG8gcmVtb3ZlIGVsZW1lbnRcclxuICAgIGlmIChzdGF0dXMgJiYgY29yZS5nZXRBdHRlbXB0VG9SZW1vdmUoKSkge1xyXG4gICAgICAvLyByZW1vdmUgZWxlbWVudCBmcm9tIGN1cnJlbnQgY2FudmFzXHJcbiAgICAgIHJlbW92ZUVsZW1lbnQoZWxlbWVudFRvQmVUcmFzaGVkLmVsZW1lbnRJRCwgKCkgPT4ge1xyXG4gICAgICAgIC8vIGFja25vd2xlZGdlXHJcbiAgICAgICAgb25BZnRlclRyYXNoKCk7XHJcbiAgICAgIH0sIHRydWUpOyAvLyB0cnVlIC0gZGlzcGF0Y2ggYHJlbW92ZUVsZW1lbnRgIGV2ZW50XHJcblxyXG4gICAgICAvLyBkb25lIGRyYWdnaW5nLCBmbHVzaCB0aGUgZHJhZ2dlZCBlbGVtZW50XHJcbiAgICAgIGNvcmUuc2V0RHJhZ2dlZEVsZW1lbnQobnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVzZXQgYXR0ZW1wdCB0byByZW1vdmVcclxuICAgIGNvcmUuc2V0QXR0ZW1wdFRvUmVtb3ZlKGZhbHNlKTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIHVzZXIgaXMgZHJhZ2dpbmcgb3ZlciB0aGUgdHJhc2hcclxuICAvLyBgcHJldmVudERlZmF1bHRgIC0gUmVxdWlyZWQuIEFsbG93cyB1cyB0byBkcm9wLlxyXG4gIC8vIEBwYXJhbSBlIHtldmVudH1cclxuICBfb25EcmFnT3ZlciA9IChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB1c2VyIGlzIGxlYXZpbmcgdGhlIHRyYXNoXHJcbiAgICogQHBhcmFtIGUge2V2ZW50fVxyXG4gICAqL1xyXG4gIF9vbkRyYWdMZWF2ZSA9IChlKSA9PiB7XHJcbiAgICB0aGlzLl9tYW5hZ2VJbnNpZGVDbGFzcyhlLCAncmVtb3ZlJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB1c2VyIGlzIGRyYWdnaW5nIG92ZXIgdHJhc2hcclxuICAgKiBAcGFyYW0gZSB7ZXZlbnR9XHJcbiAgICovXHJcbiAgX29uRHJhZ0VudGVyID0gKGUpID0+IHtcclxuICAgIGNvbnN0IGVsZW1lbnRUb0JlVHJhc2hlZCA9IGNvcmUuZ2V0RHJhZ2dlZEVsZW1lbnQoKTtcclxuXHJcbiAgICBpZiAoZWxlbWVudFRvQmVUcmFzaGVkKSB7XHJcbiAgICAgIHRoaXMuX21hbmFnZUluc2lkZUNsYXNzKGUsICdhZGQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXZcclxuICAgICAgICByZWY9e3RoaXMudHJhc2hSZWZ9XHJcbiAgICAgICAgY2xhc3NOYW1lPVwidHJhc2gtYm94XCJcclxuICAgICAgICBvbkRyYWdMZWF2ZT17dGhpcy5fb25EcmFnTGVhdmV9XHJcbiAgICAgICAgb25EcmFnRW50ZXI9e3RoaXMuX29uRHJhZ0VudGVyfVxyXG4gICAgICAgIG9uRHJhZ092ZXI9e3RoaXMuX29uRHJhZ092ZXJ9XHJcbiAgICAgICAgb25Ecm9wPXt0aGlzLl9vbkRyb3B9XHJcbiAgICAgID5cclxuICAgICAgICB7IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgPHNwYW4+VHJhc2ggQm94PC9zcGFuPiB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcblRyYXNoLnByb3BUeXBlcyA9IHtcclxuICBvbkJlZm9yZVRyYXNoOiBQcm9wVHlwZXMuZnVuYyxcclxuICBvbkFmdGVyVHJhc2g6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5lbGVtZW50KSxcclxuICAgIFByb3BUeXBlcy5lbGVtZW50XHJcbiAgXSksXHJcbn07XHJcblxyXG5UcmFzaC5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgb25CZWZvcmVUcmFzaDogKCkgPT4gKHRydWUpLFxyXG4gIG9uQWZ0ZXJUcmFzaDogKCkgPT4gKHRydWUpXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUcmFzaDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmltcG9ydCBjb3JlIGZyb20gJy4uLy4uL2NvcmUvY29yZSc7XHJcbmltcG9ydCBzdGF0ZSBmcm9tICcuLi8uLi9jb3JlL3N0YXRlJztcclxuXHJcbmNsYXNzIFByZXZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgY3VycmVudFN0YXRlOiBzdGF0ZS5nZXRTdGF0ZSgpXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cyA9IGNvcmUuZ2V0UmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cygpO1xyXG4gICAgc3RhdGUuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLl9vblN0YXRlQ2hhbmdlKTtcclxuICB9XHJcblxyXG4gIC8vIGtlZXAgdHJhY2sgb2Ygc3RhdGUgdHJlZSBjaGFuZ2VzXHJcbiAgX29uU3RhdGVDaGFuZ2UgPSAobmV3U3RhdGUpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBjdXJyZW50U3RhdGU6IG5ld1N0YXRlXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJlY3VyZXNpdmUgZnVuY3Rpb24gdG8gaXRlcmF0ZSB0aHJvdWdoIGFsbCBub2RlIG9mIHN0YXRlIHRyZWUgYW5kXHJcbiAgICogcmVuZGVyIGFwcHJvcHJhdGUgY29tcG9uZW50IGFuZCBwYXNzIG5lY2Vzc2FyeSBwcm9wc1xyXG4gICAqIEBwYXJhbSBlbGVtZW50IHtPYmplY3R9IC0gaW5mb21hdGlvbiBvZiBzdGF0ZSB0cmVlIG5vZGVcclxuICAgKiBAcmV0dXJucyB7SlNYfSAtIFByZXZpZXcvSlNYIHJlcHJlc2VudGF0aW9uIG9mIGN1cnJlbnQgc3RhdGUgdHJlZVxyXG4gICAqL1xyXG4gIF9yZW5kZXJFbGVtZW50SW5QcmV2aWV3TW9kZSA9IChlbGVtZW50KSA9PiB7XHJcbiAgICBjb25zdCBjaGlsZHJlbiA9IHt9O1xyXG4gICAgY29uc3QgZWxlbWVudERhdGEgPSB0aGlzLnJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHNcclxuICAgICAgLmZpbmQoZSA9PiBlLnR5cGUgPT09IGVsZW1lbnQudHlwZSk7XHJcblxyXG4gICAgLy8gZWxlbWVudCBoYXMgc3ViIGZpZWxkcywgcmVuZGVyIHRob3NlIGZpZWxkcyBmaXJzdFxyXG4gICAgLy8gYW5kIHRoZW4gY29tZSBiYWNrIHRvIGN1cnJlbnQgZmllbGRcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGVsZW1lbnQuZmllbGRzKSkge1xyXG4gICAgICBlbGVtZW50LmZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xyXG4gICAgICAgIGNoaWxkcmVuW2ZpZWxkLmRyb3B6b25lSURdID0gY2hpbGRyZW5bZmllbGQuZHJvcHpvbmVJRF0gfHwgW107XHJcbiAgICAgICAgY2hpbGRyZW5bZmllbGQuZHJvcHpvbmVJRF0gPSBjaGlsZHJlbltmaWVsZC5kcm9wem9uZUlEXVxyXG4gICAgICAgICAgLmNvbmNhdCh0aGlzLl9yZW5kZXJFbGVtZW50SW5QcmV2aWV3TW9kZShmaWVsZCkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZW5kZXIgY29ycmVzcG9uZGluZyBjb21wb25lbnQgYW5kIHBhc3MgbmVjZXNzYXJ5IHByb3BzXHJcbiAgICAvLyBzaG93UHJldmlldyBpcyBtYW5kYXRvcnlcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxlbGVtZW50RGF0YS5jb21wb25lbnRcclxuICAgICAgICBpZD17ZWxlbWVudC5pZH1cclxuICAgICAgICBrZXk9e2VsZW1lbnQuaWR9XHJcbiAgICAgICAgY2hpbGROb2RlPXtjaGlsZHJlbn1cclxuICAgICAgICB7Li4ueyAuLi5lbGVtZW50LCBzaG93UHJldmlldzogdHJ1ZSwgc2hvd0Jhc2ljQ29udGVudDogZmFsc2UgfX1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCByb290ID0gdGhpcy5zdGF0ZS5jdXJyZW50U3RhdGVbMF07XHJcblxyXG4gICAgLy8gaWYgeW91IHdhbnQgbW9yZSBmbGV4aWJsaXR5XHJcbiAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4oe1xyXG4gICAgICAgIGNoaWxkcmVuOiByb290LmZpZWxkcy5tYXAodGhpcy5fcmVuZGVyRWxlbWVudEluUHJldmlld01vZGUpXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YW5kYXJkIHJlbmRlciAtIG9ubHkgPFByZXZpZXcgLz4gYW5kIGRvbmVcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJldmlldy1jb250YWluZXJcIj5cclxuICAgICAgICB7XHJcbiAgICAgICAgICByb290LmZpZWxkcy5tYXAodGhpcy5fcmVuZGVyRWxlbWVudEluUHJldmlld01vZGUpXHJcbiAgICAgICAgfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5QcmV2aWV3LnByb3BUeXBlcyA9IHtcclxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmNcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByZXZpZXc7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=